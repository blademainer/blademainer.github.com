<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blademainer</title>
  
  <subtitle>Thinking cap.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiongyingqi.com/"/>
  <updated>2020-03-24T16:00:00.000Z</updated>
  <id>http://xiongyingqi.com/</id>
  
  <author>
    <name>blademainer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go解坑指南</title>
    <link href="http://xiongyingqi.com/2020/03/24/go-hit-the-bit/"/>
    <id>http://xiongyingqi.com/2020/03/24/go-hit-the-bit/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/golang.png" alt=""></p><p>Go解坑指南</p><a id="more"></a><h2 id="日常踩坑：for-range"><a href="#日常踩坑：for-range" class="headerlink" title="日常踩坑：for-range"></a>日常踩坑：for-range</h2><p><strong>这个循环会停止吗？</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    v := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i, _ := <span class="keyword">range</span> v &#123;</span><br><span class="line">        v = <span class="built_in">append</span>(v, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>先来看看for-range（two-value）底层实现</strong><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for_temp := v <span class="comment">// for_temp是slice v的值拷贝</span></span><br><span class="line">len_temp := <span class="built_in">len</span>(for_temp)</span><br><span class="line"><span class="keyword">for</span> index_temp = <span class="number">0</span>; index_temp &lt; len_temp; index_temp++ &#123;</span><br><span class="line">    value_temp = for_temp[index_temp] <span class="comment">// value_temp也是元素的值拷贝</span></span><br><span class="line">    index = index_temp</span><br><span class="line">    value = value_temp</span><br><span class="line">    original body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>所以，上述的代码只会循环3次。</p><hr><p><strong>再来个常见的，copys数组里是什么？<code>[&quot;alice&quot;, &quot;bob&quot;]</code>?</strong><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dogs = []Dog&#123;&#125;</span><br><span class="line">dogs = <span class="built_in">append</span>(dogs, Dog&#123;Name: <span class="string">"alice"</span>&#125;, Dog&#123;Name: <span class="string">"bob"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copys []*Dog</span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> dogs &#123;</span><br><span class="line">    copys = <span class="built_in">append</span>(copys, &amp;d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p><code>[&quot;bob&quot;, &quot;bob&quot;]</code></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>d是一个临时变量，在循环开始前声明，d会被重复利用。</p><hr><h3 id="扩展：map的for-range是怎样的呢？为什么是无序的？"><a href="#扩展：map的for-range是怎样的呢？为什么是无序的？" class="headerlink" title="扩展：map的for-range是怎样的呢？为什么是无序的？"></a>扩展：map的for-range是怎样的呢？为什么是无序的？</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> mapiterinit(<span class="keyword">type</span>, <span class="keyword">range</span>, &amp;hiter); hiter.key != <span class="literal">nil</span>; mapiternext(&amp;hiter) &#123;</span><br><span class="line">    index_temp = *hiter.key</span><br><span class="line">    value_temp = *hiter.val</span><br><span class="line">    index = index_temp</span><br><span class="line">    value = value_temp</span><br><span class="line">    original body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size="6">答：mapiterinit被做了手脚，迭代器初始位置是随机的。<br>但是，迭代出来的相对位置是固定的。</font><hr><h2 id="深度解惑：defer"><a href="#深度解惑：defer" class="headerlink" title="深度解惑：defer"></a>深度解惑：defer</h2><ul><li>优雅的释放资源或关闭</li><li>与recover配合捕获程序异常</li><li>结合闭包在return前做一些处理</li><li>…</li></ul><hr><p><strong>函数<code>f1</code>与<code>f2</code>的返回值分别是什么？</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        result *= <span class="number">7</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    tmp := <span class="number">5</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        tmp = tmp + <span class="number">5</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>解答上述问题，需要了解这些知识</p><ul><li>defer原理</li><li>Go闭包</li><li>逃逸分析（escape analyze）</li></ul><hr><p><strong>defer原理</strong></p><ol><li><p>defer的对象一定是函数调用</p></li><li><p>defer的函数调用顺序LIFO(后进先出)</p></li><li><p>defer与return的关系：return语句并不是原子指令，可以分解为以下3条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值 = xxx</span><br><span class="line">调用defer函数</span><br><span class="line">空的return</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>Go闭包</strong></p><font size="5">闭包是由函数及其相关引用环境组合而成的实体(即：闭包=函数+引用环境)</font><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c1 := f(<span class="number">0</span>)</span><br><span class="line">c2 := f(<span class="number">0</span>)</span><br><span class="line">c1()    <span class="comment">// reference to i, i = 0, return 1</span></span><br><span class="line">c2()    <span class="comment">// reference to another i, i = 0, return 1</span></span><br></pre></td></tr></table></figure><font size="5">c1跟c2引用的是不同的环境，函数f每进入一次，就形成了一个新的环境。</font><hr><p><strong>逃逸分析（escape analyze）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCursor</span><span class="params">()</span> *<span class="title">Cursor</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c Cursor</span><br><span class="line">    c.X = <span class="number">500</span></span><br><span class="line">    noinline()</span><br><span class="line">    <span class="keyword">return</span> &amp;c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~/closure ✗ <span class="keyword">go</span> build -gcflags <span class="string">'-l -m'</span></span><br><span class="line">./main.<span class="keyword">go</span>:<span class="number">12</span>:<span class="number">9</span>: <span class="function"><span class="keyword">func</span> <span class="title">literal</span> <span class="title">escapes</span> <span class="title">to</span> <span class="title">heap</span></span></span><br><span class="line"><span class="function">./<span class="title">main</span>.<span class="title">go</span>:19:6: <span class="title">moved</span> <span class="title">to</span> <span class="title">heap</span>: <span class="title">c</span></span></span><br></pre></td></tr></table></figure><p>编译器会识别出变量需要在堆上分配。</p><hr><p><strong>分享一段defer+闭包的实战代码</strong><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code <span class="keyword">string</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Publish(&amp;Message&#123;Request: <span class="string">"bind"</span>, Code: code&#125;)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// defer Publish(&amp;Message&#123;Request: "bind", Code: code&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition0 &#123;</span><br><span class="line">    code = DBError</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    code = InternalError</span><br><span class="line">&#125;</span><br><span class="line">code = OK</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="错觉瞬间：Go到底有没引用？"><a href="#错觉瞬间：Go到底有没引用？" class="headerlink" title="错觉瞬间：Go到底有没引用？"></a>错觉瞬间：Go到底有没引用？</h2><hr><p><strong>错觉1</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[<span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    test(s)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出[999 2 3]，s被修改了！引用实锤！</p><hr><p><strong>错觉2</strong><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="number">999</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    test(s)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>输出[1 2 3]，s没被修改，那究竟还是不是引用呢？</p><hr><p><strong>其实，它只是一个指针</strong><br><img src="https://img.draveness.me/2019-02-20-golang-slice-struct.png" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">    array unsafe.Pointer <span class="comment">// 底层数组指针</span></span><br><span class="line">    <span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">    <span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，Go的函数传参是值传递的。</p><hr><p>There is no pass-by-reference in Go<br>— Dave Cheney</p><p><img src="https://dave.cheney.net/wp-content/uploads/2014/11/dfc.jpg =350x350" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/golang.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Go解坑指南&lt;/p&gt;
    
    </summary>
    
      <category term="go" scheme="http://xiongyingqi.com/categories/go/"/>
    
    
      <category term="go" scheme="http://xiongyingqi.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>k8s优雅关闭</title>
    <link href="http://xiongyingqi.com/2020/03/24/gracefully-terminate/"/>
    <id>http://xiongyingqi.com/2020/03/24/gracefully-terminate/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-04-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gracefully.jpeg" alt=""></p><p>k8s如何保障服务健壮性 之 实现优雅关闭<br><a id="more"></a></p><h2 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h2><ol><li>没有graceful的关闭将导致请求连接异常；</li><li>数据统计短时间内出现大量错误；</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="两类信号"><a href="#两类信号" class="headerlink" title="两类信号"></a>两类信号</h3><p><code>SIGTERM</code>：通知进程进行graceful信号；</p><p><code>SIGKILL</code>：硬终止信息；</p><h3 id="k8s中关闭pod时的流程"><a href="#k8s中关闭pod时的流程" class="headerlink" title="k8s中关闭pod时的流程"></a>k8s中关闭pod时的流程</h3><p><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods</a></p><p>简而言之就是：</p><ol><li>先把pod标记为Terminating，此时service就会把该pod去除了；</li><li>发送SIGTERM给pod内的所有容器；</li><li>pod等待grace period结束或者pod提前处理完SIGTERM；</li><li>pod发送SIGKILL给所有容器；</li></ol><h3 id="确保信号正确传递到进程"><a href="#确保信号正确传递到进程" class="headerlink" title="确保信号正确传递到进程"></a>确保信号正确传递到进程</h3><h4 id="CMD的坑"><a href="#CMD的坑" class="headerlink" title="CMD的坑"></a>CMD的坑</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD myapp</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c myapp</span><br></pre></td></tr></table></figure><p>以上的写法，容器接收到信号的进程是<code>/bin/sh</code>而不是<code>myapp</code>，这种写法会依赖于真正使用的shell，有些shell是不会传递信号给子进程的。比如基础镜像使用的是Alpine Linux下的基础shell就不会，但是bash就可以。</p><h4 id="使用EXEC的方式"><a href="#使用EXEC的方式" class="headerlink" title="使用EXEC的方式"></a>使用EXEC的方式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">CMD</span> <span class="string">["myapp"]</span></span><br></pre></td></tr></table></figure><p>上面的方式将会直接执行<code>myapp</code>，但是这种就不能把环境变量当做参数传递了？？？</p><h4 id="base方式"><a href="#base方式" class="headerlink" title="base方式"></a>base方式</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">CMD</span> <span class="string">["/bin/bash",</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"myapp --arg=$ENV_VAR"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>解决以上问题。</p><h3 id="k8s支持的几种方式"><a href="#k8s支持的几种方式" class="headerlink" title="k8s支持的几种方式"></a>k8s支持的几种方式</h3><h4 id="1、yaml中修改"><a href="#1、yaml中修改" class="headerlink" title="1、yaml中修改"></a>1、yaml中修改</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">terminationGracePeriodSeconds:</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><h4 id="2、delete命令"><a href="#2、delete命令" class="headerlink" title="2、delete命令"></a>2、delete命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod-name --grace-peroid=60</span><br></pre></td></tr></table></figure><h4 id="3、preStop-Hook"><a href="#3、preStop-Hook" class="headerlink" title="3、preStop Hook"></a>3、preStop Hook</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lifecycle:</span></span><br><span class="line"><span class="attr">  preStop:</span></span><br><span class="line"><span class="attr">    exec:</span></span><br><span class="line">      <span class="comment"># SIGTERM triggers a quick exit; gracefully terminate instead</span></span><br><span class="line"><span class="attr">      command:</span> <span class="string">["/usr/sbin/nginx","-s","quit"]</span></span><br></pre></td></tr></table></figure><h4 id="4、validating-webhook"><a href="#4、validating-webhook" class="headerlink" title="4、validating webhook"></a>4、validating webhook</h4><p>指到资源清理完成才返回true，否则返回false，这样pod就能保证清理完才推出，而不会因为grace peroid被强制清除。</p><h3 id="程序支持（最重要）"><a href="#程序支持（最重要）" class="headerlink" title="程序支持（最重要）"></a>程序支持（最重要）</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>首先关闭所有的监听，如果有使用服务注册之类的话，应该也把该服务从注册中去除；</li><li>然后关闭所有的空闲连接；</li><li>然后无限期等待连接处理完毕转为空闲，并关闭；</li><li>如果提供了带有超时的Context，将在服务关闭前返回Context的超时错误；</li></ol><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p>go http的server.Shutdown</p><blockquote><p>如果你的服务是被其他服务调用的，那么关闭会比较复杂，</p></blockquote><ol><li>约定调用者的keep-alive timeout 时间，默认为30秒</li><li>服务关闭时，先设置 keep-alive 为 false</li><li>服务关闭时，再等待30秒</li><li>再调用server.Shutdown</li></ol><h4 id="grpc"><a href="#grpc" class="headerlink" title="grpc"></a>grpc</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    _ <span class="string">"net/http/pprof"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"os/signal"</span></span><br><span class="line">    <span class="string">"syscall"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/blademainer/commons/pkg/logger"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">    pb <span class="string">"google.golang.org/grpc/examples/helloworld/helloworld"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc/health"</span></span><br><span class="line">    healthpb <span class="string">"google.golang.org/grpc/health/grpc_health_v1"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc/keepalive"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serviceName = <span class="string">"myserviced"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    version = <span class="string">"no version"</span></span><br><span class="line"></span><br><span class="line">    debugPort  = flag.Int(<span class="string">"debugPort"</span>, <span class="number">16161</span>, <span class="string">"debug port"</span>)</span><br><span class="line">    httpPort   = flag.Int(<span class="string">"httpPort"</span>, <span class="number">8888</span>, <span class="string">"http port"</span>)</span><br><span class="line">    grpcPort   = flag.Int(<span class="string">"grpcPort"</span>, <span class="number">9200</span>, <span class="string">"grpc port"</span>)</span><br><span class="line">    healthPort = flag.Int(<span class="string">"healthPort"</span>, <span class="number">6666</span>, <span class="string">"grpc health port"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line">    log.Printf(<span class="string">"Received: %v"</span>, in.GetName())</span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    logger.Infof(<span class="string">"Starting app, version: %v"</span>, version)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shutdown functions</span></span><br><span class="line">    shutdownFunctions := <span class="built_in">make</span>([]<span class="function"><span class="keyword">func</span><span class="params">(context.Context)</span>, 0)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ctx</span>, <span class="title">cancel</span> := <span class="title">context</span>.<span class="title">WithCancel</span><span class="params">(context.Background()</span>)</span></span><br><span class="line"><span class="function"><span class="title">shutdownFunctions</span> = <span class="title">append</span><span class="params">(shutdownFunctions, <span class="keyword">func</span>(ctx context.Context)</span></span> &#123;</span><br><span class="line">        cancel()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    interrupt := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">    signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)</span><br><span class="line">    <span class="keyword">defer</span> signal.Stop(interrupt)</span><br><span class="line"></span><br><span class="line">    g, ctx := errgroup.WithContext(ctx)</span><br><span class="line"></span><br><span class="line">    g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="comment">//profiles := pprof.Profiles()</span></span><br><span class="line"></span><br><span class="line">        httpServer := &amp;http.Server&#123;</span><br><span class="line">            Addr:         fmt.Sprintf(<span class="string">":%d"</span>, *debugPort),</span><br><span class="line">            ReadTimeout:  <span class="number">10</span> * time.Second,</span><br><span class="line">            WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">            Handler:      <span class="literal">nil</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        shutdownFunctions = <span class="built_in">append</span>(shutdownFunctions, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">            err := httpServer.Shutdown(ctx)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Errorf(<span class="string">"failed to shutdown pprof server! error: %v"</span>, err.Error())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        logger.Infof(<span class="string">"pprof server serving at :%d"</span>, *debugPort)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err := httpServer.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">            logger.Errorf(<span class="string">"failed to listen: %v"</span>, err.Error())</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// web server metrics</span></span><br><span class="line">    g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        httpServer := &amp;http.Server&#123;</span><br><span class="line">            Addr:         fmt.Sprintf(<span class="string">":%d"</span>, *httpPort),</span><br><span class="line">            ReadTimeout:  <span class="number">10</span> * time.Second,</span><br><span class="line">            WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">        &#125;</span><br><span class="line">        shutdownFunctions = <span class="built_in">append</span>(shutdownFunctions, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">            err := httpServer.Shutdown(ctx)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logger.Errorf(<span class="string">"failed to shutdown pprof server! error: %v"</span>, err.Error())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        logger.Infof(<span class="string">"HTTP Metrics server serving at :%d"</span>, *httpPort)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err := httpServer.ListenAndServe(); err != http.ErrServerClosed &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gRPC Health Server</span></span><br><span class="line">    healthServer := health.NewServer()</span><br><span class="line">    g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        grpcHealthServer := grpc.NewServer()</span><br><span class="line"></span><br><span class="line">        shutdownFunctions = <span class="built_in">append</span>(shutdownFunctions, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">            healthServer.SetServingStatus(fmt.Sprintf(<span class="string">"grpc.health.v1.%s"</span>, serviceName), healthpb.HealthCheckResponse_NOT_SERVING)</span><br><span class="line">            grpcHealthServer.GracefulStop()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        healthpb.RegisterHealthServer(grpcHealthServer, healthServer)</span><br><span class="line"></span><br><span class="line">        haddr := fmt.Sprintf(<span class="string">":%d"</span>, *healthPort)</span><br><span class="line">        hln, err := net.Listen(<span class="string">"tcp"</span>, haddr)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            logger.Errorf(<span class="string">"gRPC Health server: failed to listen, error: %v"</span>, err)</span><br><span class="line">            os.Exit(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        logger.Infof(<span class="string">"gRPC health server serving at %s"</span>, haddr)</span><br><span class="line">        <span class="keyword">return</span> grpcHealthServer.Serve(hln)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gRPC server</span></span><br><span class="line">    g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        addr := fmt.Sprintf(<span class="string">":%d"</span>, *grpcPort)</span><br><span class="line">        ln, err := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            logger.Errorf(<span class="string">"gRPC server: failed to listen, error: %v"</span>, err)</span><br><span class="line">            os.Exit(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server := &amp;server&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        grpcServer := grpc.NewServer(</span><br><span class="line">            <span class="comment">// MaxConnectionAge is just to avoid long connection, to facilitate load balancing</span></span><br><span class="line">            <span class="comment">// MaxConnectionAgeGrace will torn them, default to infinity</span></span><br><span class="line">            grpc.KeepaliveParams(keepalive.ServerParameters&#123;MaxConnectionAge: <span class="number">2</span> * time.Minute&#125;),</span><br><span class="line">        )</span><br><span class="line">        pb.RegisterGreeterServer(grpcServer, server)</span><br><span class="line">        shutdownFunctions = <span class="built_in">append</span>(shutdownFunctions, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">            healthServer.SetServingStatus(fmt.Sprintf(<span class="string">"grpc.health.v1.%s"</span>, serviceName), healthpb.HealthCheckResponse_NOT_SERVING)</span><br><span class="line">            grpcServer.GracefulStop()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        logger.Infof(<span class="string">"gRPC server serving at %s"</span>, addr)</span><br><span class="line"></span><br><span class="line">        healthServer.SetServingStatus(fmt.Sprintf(<span class="string">"grpc.health.v1.%s"</span>, serviceName), healthpb.HealthCheckResponse_SERVING)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> grpcServer.Serve(ln)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-interrupt:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logger.Warnf(<span class="string">"received shutdown signal"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的Context，等待各个服务释放资源</span></span><br><span class="line">    timeout, cancelFunc := context.WithTimeout(context.Background(), <span class="number">10</span>*time.Second)</span><br><span class="line">    <span class="keyword">defer</span> cancelFunc()</span><br><span class="line">    <span class="keyword">for</span> _, shutdown := <span class="keyword">range</span> shutdownFunctions &#123;</span><br><span class="line">        shutdown(timeout)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err := g.Wait()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logger.Errorf(<span class="string">"server returning an error, error: %v"</span>, err)</span><br><span class="line">        os.Exit(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cmdAddr, _ := net.ResolveTCPAddr(<span class="string">"tcp"</span>, n.cfg.Addr)</span><br><span class="line">lcmd, err := net.ListenTCP(<span class="string">"tcp"</span>, cmdAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> lcmd.Close()</span><br><span class="line">quitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(quitChan, os.Interrupt, os.Kill, syscall.SIGTERM)</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-quitChan:</span><br><span class="line">        lcmd.Close()</span><br><span class="line">        wg.Wait()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    lcmd.SetDeadline(time.Now().Add(<span class="number">1e9</span>))</span><br><span class="line">    conn, err := lcmd.AcceptTCP()</span><br><span class="line">    <span class="keyword">if</span> opErr, ok := err.(*net.OpError); ok &amp;&amp; opErr.Timeout() &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.WithError(err).Errorln(<span class="string">"Listener accept"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        wg.Done()</span><br><span class="line">        n.handleRequest(conn)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gracefully.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;k8s如何保障服务健壮性 之 实现优雅关闭&lt;br&gt;
    
    </summary>
    
      <category term="cloud" scheme="http://xiongyingqi.com/categories/cloud/"/>
    
    
      <category term="go" scheme="http://xiongyingqi.com/tags/go/"/>
    
      <category term="k8s" scheme="http://xiongyingqi.com/tags/k8s/"/>
    
      <category term="gracefully" scheme="http://xiongyingqi.com/tags/gracefully/"/>
    
      <category term="terminate" scheme="http://xiongyingqi.com/tags/terminate/"/>
    
  </entry>
  
  <entry>
    <title>k8s入门指引</title>
    <link href="http://xiongyingqi.com/2020/03/24/how-to-k8s/"/>
    <id>http://xiongyingqi.com/2020/03/24/how-to-k8s/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-5.png" alt=""></p><p>帮助刚接触k8s的同学，快速和部署健壮的服务到k8s。</p><a id="more"></a><h2 id="如何开始-准备-前提"><a href="#如何开始-准备-前提" class="headerlink" title="如何开始(准备/前提)?"></a>如何开始(准备/前提)?</h2><blockquote><p><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/" title="基础知识" target="_blank" rel="noopener"><i class="fa fa-external-link fa-lg"></i> 学前班</a><br>前期准备<br>前期知识: 容器(如: docker)?</p></blockquote><h2 id="如何抢先体验K8S？"><a href="#如何抢先体验K8S？" class="headerlink" title="如何抢先体验K8S？"></a>如何抢先体验K8S？</h2><p><a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-interactive/" title="K8S在线互动" target="_blank" rel="noopener"><i class="fa fa-external-link fa-lg"></i> <strong>kubernetes.io/docs/tutorials</strong></a></p><p>可以尝试运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get pods</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> kubectl get ns</span></span><br></pre></td></tr></table></figure><h2 id="如何搭建自己的-MiniKube？"><a href="#如何搭建自己的-MiniKube？" class="headerlink" title="如何搭建自己的 MiniKube？"></a>如何搭建自己的 MiniKube？</h2><blockquote><p><strong>TODO</strong><br>[color=red]</p></blockquote><h2 id="如何管理配置？"><a href="#如何管理配置？" class="headerlink" title="如何管理配置？"></a>如何管理配置？</h2><ul><li>环境相关配置，放到configmap。多个deploy同时引用同个configmap即可。</li><li>业务相关配置，管理端写etcd/redis，服务端监听etcd/redis的配置变更。</li><li>ToC端应用，<strong>务必不要</strong>每次都读取etcd/redis的配置，而应当读取本地内存；只有在应用<code>启动</code>或接收到<code>配置变更事件</code>之后才缓存到本地内存。</li><li><blockquote><p>更新configmap之后，deploy需要重启才能使配置生效（除非程序自动读取配置进行刷新）</p></blockquote></li></ul><h2 id="如何处理日志？"><a href="#如何处理日志？" class="headerlink" title="如何处理日志？"></a>如何处理日志？</h2><blockquote><p>打日志<br>运用日志</p></blockquote><ul><li>日志在容器内，务必输出到终端(<strong>stdout</strong>)，然后使用统一机制，收集到ES(联系运维)；</li><li>管理端的日志属于：运营、产品、商户、代理商的操作日志<ul><li>产生日志相对较少(一般而言);</li><li>具备审计和安全日志的意义，<strong>备监管部门审查</strong>;</li><li>须保留半年、一年(甚至更久);</li></ul></li><li>服务端的日志属于：用户端的访问日志，是应用内部状态的日志，<ul><li>产生日志较多，甚至海量;</li><li>具备系统分析意义，用于：问题排查(性能、错误等)、生成统计/分析;</li><li>仅保留一周；</li></ul></li><li>若因实际情况，需在容器内临时落盘，请映射日志路径到<a href="https://kubernetes.io/zh/docs/concepts/storage/volumes/#emptydir" title="emptydir" target="_blank" rel="noopener">emptydir</a>。如此，可避免程序受限与所在node主机存储限制。</li></ul><h2 id="如何保障服务健壮性？"><a href="#如何保障服务健壮性？" class="headerlink" title="如何保障服务健壮性？"></a>如何保障服务健壮性？</h2><ul><li>给pod加上健康检查(liveness、readiness、startup)：<ul><li>liveness: 用于提供给k8s判断pod应当存活<ul><li>生命周期决策: 若不存活，将被集群移除，并(按照预设分数)重新拉起；</li></ul></li><li>readiness: 用于提供给k8s判断该pod是否就绪<ul><li>接入流量决策: 若未就绪，不会有流量到达该pod;</li><li>(能有效防止，在上线/重启过程，发生504错误)</li></ul></li><li>startup: 用于启动<em>时间较长</em>的pod<ul><li>liveness可以使用探测端口是否可达或者判断程序是否存活的形式。保证启动的过程中不会被k8s快速杀掉。例如：<code>[ -z &quot;\</code>ps -p 1 | awk ‘NR&gt;1 {print $0}’`“ ] &amp;&amp; exit 1`</li><li>使用readiness来确保服务启动之后才导入流量。比如，curl业务接口，确保只有服务准备好之后才能有流量进来</li></ul></li><li>具体可选方法:<ul><li>httpGet.{path, port}: HTTP协议，提供待测路径、端口;</li><li>tcpSocket.port: 提供，待检测端口</li><li>exec.command: 提供可执行工具, 可发起自定义检测</li></ul></li><li>参考：<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/" title="liveness-readiness-startup-probes" target="_blank" rel="noopener">liveness-readiness-startup-probes</a></li></ul></li><li>==Pod关闭==前保证服务流量正确处理：<ul><li>参考：<a href="/2020/03/24/gracefully-terminate/" title="优雅关闭">实现优雅关闭</a> <i class="fa fa-arrow-left fa-lg"></i></li></ul></li><li>ToC业务务必加上<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" title="hpa" target="_blank" rel="noopener">hpa</a>以应对流量爆发或运营活动。</li><li>资源策略：cpu、内存的request/limit，记为<code>[cpu_req, cpu_lim)</code>、<code>[mem_req, mem_lim)</code>。参考: <a href="https://kubernetes.io/zh/docs/concepts/configuration/manage-compute-resources-container/" title="resource-quota" target="_blank" rel="noopener">manage-compute-resources-container</a><ul><li>HPA依赖服务的cpu和内存指标进行扩/缩容；</li><li>配置request/limit有利于k8s的合理、高效调度；</li><li>高IO型应用，应当把内存比cpu比例设置在4:1~8:1；计算密集型应用应当设置在2:1~4:1</li><li><code>cpu=10</code> 和 <code>cpu=10m</code> 的区别！内存：Mi、Gi</li><li>例如，网关服务配置: cpu_req=1000m, cpu_lim=2000m。我们配置hpa: targetCPUUtilizationPercentage=60，那么当pod的cpu从1000m上升到1600m时，k8s会调大pod份数直到：每个pod的cpu&lt;=1600m或者该deploy的总副本数达到maxReplicas</li></ul></li></ul><blockquote><p>liveness如果使用的shell来判断进程是否存活，务必使用在command最开始加上’sh -c’。例如：<code>command: [&quot;sh&quot;, &quot;-c&quot;, &quot;sleep 120; /app/main --stop&quot;]</code></p></blockquote><h2 id="如何对集群进行调优？"><a href="#如何对集群进行调优？" class="headerlink" title="如何对集群进行调优？"></a>如何对集群进行调优？</h2><blockquote><p><strong>TODO</strong><br>列举：手段、涵盖事项<br>(点到即止，若需展开，另起问题)<br>[color=red]</p></blockquote><h2 id="如何搭有状态集群？"><a href="#如何搭有状态集群？" class="headerlink" title="如何搭有状态集群？"></a>如何搭有状态集群？</h2><ul><li>优先使用现有helm内提供的模板来搭建类似 etcd/zk/kafka 集群：</li><li>阿里云集群可以使用自动创建云盘的策略<a href="https://help.aliyun.com/document_detail/100457.html" target="_blank" rel="noopener">有状态服务-动态云盘使用最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pasted-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;帮助刚接触k8s的同学，快速和部署健壮的服务到k8s。&lt;/p&gt;
    
    </summary>
    
      <category term="cloud" scheme="http://xiongyingqi.com/categories/cloud/"/>
    
    
      <category term="go" scheme="http://xiongyingqi.com/tags/go/"/>
    
      <category term="k8s" scheme="http://xiongyingqi.com/tags/k8s/"/>
    
      <category term="gracefully" scheme="http://xiongyingqi.com/tags/gracefully/"/>
    
      <category term="terminate" scheme="http://xiongyingqi.com/tags/terminate/"/>
    
  </entry>
  
  <entry>
    <title>open-source-projects</title>
    <link href="http://xiongyingqi.com/2019/06/27/open-source-projects/"/>
    <id>http://xiongyingqi.com/2019/06/27/open-source-projects/</id>
    <published>2019-06-27T12:30:00.000Z</published>
    <updated>2019-06-27T12:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="consistency"><a href="#consistency" class="headerlink" title="consistency"></a>consistency</h1><ul><li><a href="https://github.com/etcd-io/etcd/tree/master/raft" target="_blank" rel="noopener">raft</a></li></ul><h1 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h1><h2 id="mq"><a href="#mq" class="headerlink" title="mq"></a>mq</h2><ul><li>kafka go client: <a href="https://github.com/Shopify/sarama" target="_blank" rel="noopener">sarama</a></li></ul><h1 id="language"><a href="#language" class="headerlink" title="language"></a>language</h1><h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><ul><li><a href="https://github.com/asaskevich/govalidator" target="_blank" rel="noopener">govalidator</a></li><li><a href="https://github.com/grpc-ecosystem/go-grpc-middleware" target="_blank" rel="noopener">go-grpc-middleware</a></li></ul><h1 id="micro-service"><a href="#micro-service" class="headerlink" title="micro-service"></a>micro-service</h1><h2 id="tracing"><a href="#tracing" class="headerlink" title="tracing"></a>tracing</h2><ul><li><a href="https://github.com/apache/skywalking" target="_blank" rel="noopener">skywalking</a></li><li><a href="https://github.com/opentracing/opentracing-go" target="_blank" rel="noopener">opentracing-go</a></li><li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="noopener">jaeger</a></li></ul><h1 id="cncf"><a href="#cncf" class="headerlink" title="cncf"></a><a href="https://github.com/cncf" target="_blank" rel="noopener">cncf</a></h1><h2 id="security"><a href="#security" class="headerlink" title="security"></a>security</h2><ul><li><a href="https://github.com/hashicorp/vault" target="_blank" rel="noopener">vault</a></li><li><a href="https://github.com/ietf-wg-acme/acme" target="_blank" rel="noopener">acme</a></li><li><a href="https://github.com/coreos/go-oidc" target="_blank" rel="noopener">go-oidc</a></li></ul><h2 id="ci-cd"><a href="#ci-cd" class="headerlink" title="ci/cd"></a>ci/cd</h2><ul><li><a href="https://jenkins-x.io/" target="_blank" rel="noopener">jenkins-x</a></li><li><a href="https://github.com/jenkins-x/sso-operator" target="_blank" rel="noopener">sso-operator</a></li><li><a href="https://github.com/drone/drone-vault" target="_blank" rel="noopener">drone-vault</a></li><li><a href="https://github.com/drone/drone" target="_blank" rel="noopener">drone</a></li><li><a href="https://github.com/Azure/draft" target="_blank" rel="noopener">draft</a></li><li><a href="https://github.com/gocd/gocd" target="_blank" rel="noopener">gocd</a></li></ul><h2 id="servless"><a href="#servless" class="headerlink" title="servless"></a><a href="https://landscape.cncf.io/format=serverless" target="_blank" rel="noopener">servless</a></h2><ul><li><a href="https://spring.io/projects/spring-cloud-function" target="_blank" rel="noopener">spring-cloud-function</a></li><li><a href="https://github.com/fission/fission" target="_blank" rel="noopener">fission</a></li><li><a href="https://github.com/knative/serving" target="_blank" rel="noopener">serving</a></li><li><a href="https://github.com/kubeless/kubeless" target="_blank" rel="noopener">kubeless</a></li></ul><h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a><a href="https://kubernetes.io/" target="_blank" rel="noopener">kubernetes</a></h1><ul><li><a href="https://github.com/jetstack/cert-manager/" target="_blank" rel="noopener">cert-manager</a></li><li><a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener">ingress-nginx</a></li><li><a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">kaniko</a></li><li><a href="https://github.com/coredns/coredns" target="_blank" rel="noopener">coredns</a></li><li><a href="https://github.com/helm/chartmuseum" target="_blank" rel="noopener">chartmuseum</a></li><li><a href="https://github.com/chartmuseum/helm-push" target="_blank" rel="noopener">helm-push</a></li><li><a href="https://github.com/kubernetes-incubator/external-storage" target="_blank" rel="noopener">external-storage</a></li><li><a href="https://github.com/kubernetes/client-go" target="_blank" rel="noopener">client-go</a></li><li>java <a href="https://github.com/fabric8io/kubernetes-client" target="_blank" rel="noopener">kubernetes-client</a></li></ul><h1 id="ai"><a href="#ai" class="headerlink" title="ai"></a>ai</h1><ul><li><a href="https://github.com/tensorflow/tfjs-models" target="_blank" rel="noopener">tensorflow-js</a></li><li><a href="https://github.com/liuzhuang13/DenseNet" target="_blank" rel="noopener">DenseNet</a></li><li><a href="https://github.com/PaddlePaddle/Paddle" target="_blank" rel="noopener">Paddle</a></li></ul><h1 id="p2p-blockchain"><a href="#p2p-blockchain" class="headerlink" title="p2p/blockchain"></a>p2p/blockchain</h1><ul><li><a href="https://github.com/libp2p/go-libp2p" target="_blank" rel="noopener">go-libp2p</a></li><li><a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">go-ethereum</a></li></ul><h1 id="db"><a href="#db" class="headerlink" title="db"></a>db</h1><ul><li><a href="https://github.com/github/gh-ost" target="_blank" rel="noopener">gh-ost</a></li><li><a href="https://github.com/syndtr/goleveldb" target="_blank" rel="noopener">goleveldb</a></li><li><a href="https://github.com/siddontang/go-mysql" target="_blank" rel="noopener">go-mysql</a></li><li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">gorm</a></li><li><a href="https://github.com/oracle/mysql-operator" target="_blank" rel="noopener">mysql-operator</a></li></ul><h1 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h1><ul><li><a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a></li></ul><h1 id="design"><a href="#design" class="headerlink" title="design"></a>design</h1><h2 id="plantuml"><a href="#plantuml" class="headerlink" title="plantuml"></a>plantuml</h2><ul><li><a href="http://plantuml.com" target="_blank" rel="noopener">plantuml</a></li><li><a href="https://github.com/plantuml/plantuml" target="_blank" rel="noopener">github.com/plantuml</a></li><li><a href="https://github.com/RicardoNiepel/Azure-PlantUML" target="_blank" rel="noopener">Azure-PlantUML</a></li><li><a href="https://github.com/Templarian/MaterialDesign" target="_blank" rel="noopener">MaterialDesign</a></li><li><a href="https://github.com/awslabs/aws-icons-for-plantuml" target="_blank" rel="noopener">aws-icons-for-plantuml</a></li><li><a href="https://github.com/milo-minderbinder/AWS-PlantUML" target="_blank" rel="noopener">AWS-PlantUML</a></li></ul><h1 id="efficiency"><a href="#efficiency" class="headerlink" title="efficiency"></a>efficiency</h1><ul><li><a href="https://github.com/hackmdio/codimd" target="_blank" rel="noopener">codimd</a></li></ul><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h2 id="pay"><a href="#pay" class="headerlink" title="pay"></a>pay</h2><ul><li><a href="https://github.com/smartwalle/alipay" target="_blank" rel="noopener">alipay</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;consistency&quot;&gt;&lt;a href=&quot;#consistency&quot; class=&quot;headerlink&quot; title=&quot;consistency&quot;&gt;&lt;/a&gt;consistency&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/e
      
    
    </summary>
    
      <category term="share" scheme="http://xiongyingqi.com/categories/share/"/>
    
    
      <category term="mysql" scheme="http://xiongyingqi.com/tags/mysql/"/>
    
      <category term="kubernetes" scheme="http://xiongyingqi.com/tags/kubernetes/"/>
    
      <category term="opensource" scheme="http://xiongyingqi.com/tags/opensource/"/>
    
      <category term="projects" scheme="http://xiongyingqi.com/tags/projects/"/>
    
      <category term="cncf" scheme="http://xiongyingqi.com/tags/cncf/"/>
    
  </entry>
  
  <entry>
    <title>In Search of an Understandable Consensus Algorithm (Extended Version)</title>
    <link href="http://xiongyingqi.com/2019/03/16/in-search-of-an-understandable-consensus-algorithm/"/>
    <id>http://xiongyingqi.com/2019/03/16/in-search-of-an-understandable-consensus-algorithm/</id>
    <published>2019-03-16T16:00:00.000Z</published>
    <updated>2019-03-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Raft一致性算法论文(in search of an understandable consensus algorithm)</p></blockquote><p><img src="/images/pasted-11.png" alt=""></p><a id="more"></a><h1 id="寻找一种易于理解的一致性算法（扩展版）"><a href="#寻找一种易于理解的一致性算法（扩展版）" class="headerlink" title="寻找一种易于理解的一致性算法（扩展版）"></a>寻找一种易于理解的一致性算法（扩展版）</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是它的算法结构和 Paxos 不同，使得 Raft 算法更加容易理解并且更容易构建实际的系统。为了提升可理解性，Raft 将一致性算法分解成了几个关键模块，例如领导人选举、日志复制和安全性。同时它通过实施一个更强的一致性来减少需要考虑的状态的数量。从一个用户研究的结果可以证明，对于学生而言，Raft 算法比 Paxos 算法更加容易学习。Raft 算法还包括一个新的机制来允许集群成员的动态改变，它利用重叠的大多数来保证安全性。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>一致性算法允许一组机器像一个整体一样工作，即使其中一些机器出现故障也能够继续工作下去。正因为如此，一致性算法在构建可信赖的大规模软件系统中扮演着重要的角色。在过去的 10 年里，Paxos 算法统治着一致性算法这一领域：绝大多数的实现都是基于 Paxos 或者受其影响。同时 Paxos 也成为了教学领域里讲解一致性问题时的示例。</p><p>但是不幸的是，尽管有很多工作都在尝试降低它的复杂性，但是 Paxos 算法依然十分难以理解。并且，Paxos 自身的算法结构需要进行大幅的修改才能够应用到实际的系统中。这些都导致了工业界和学术界都对 Paxos 算法感到十分头疼。</p><p>和 Paxos 算法进行过努力之后，我们开始寻找一种新的一致性算法，可以为构建实际的系统和教学提供更好的基础。我们的做法是不寻常的，我们的首要目标是可理解性：我们是否可以在实际系统中定义一个一致性算法，并且能够比 Paxos 算法以一种更加容易的方式来学习。此外，我们希望该算法方便系统构建者的直觉的发展。不仅一个算法能够工作很重要，而且能够显而易见的知道为什么能工作也很重要。</p><p>Raft 一致性算法就是这些工作的结果。在设计 Raft 算法的时候，我们使用一些特别的技巧来提升它的可理解性，包括算法分解（Raft 主要被分成了领导人选举，日志复制和安全三个模块）和减少状态机的状态（相对于 Paxos，Raft 减少了非确定性和服务器互相处于非一致性的方式）。一份针对两所大学 43 个学生的研究表明 Raft 明显比 Paxos 算法更加容易理解。在这些学生同时学习了这两种算法之后，和 Paxos 比起来，其中 33 个学生能够回答有关于 Raft 的问题。</p><p>Raft 算法在许多方面和现有的一致性算法都很相似（主要是 Oki 和 Liskov 的 Viewstamped Replication），但是它也有一些独特的特性：</p><ul><li><strong>强领导者</strong>：和其他一致性算法相比，Raft 使用一种更强的领导能力形式。比如，日志条目只从领导者发送给其他的服务器。这种方式简化了对复制日志的管理并且使得 Raft 算法更加易于理解。</li><li><strong>领导选举</strong>：Raft 算法使用一个随机计时器来选举领导者。这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。在解决冲突的时候会更加简单快捷。</li><li><strong>成员关系调整</strong>：Raft 使用一种共同一致的方法来处理集群成员变换的问题，在这种方法下，处于调整过程中的两种不同的配置集群中大多数机器会有重叠，这就使得集群在成员变换的时候依然可以继续工作。</li></ul><p>我们相信，Raft 算法不论出于教学目的还是作为实践项目的基础都是要比 Paxos 或者其他一致性算法要优异的。它比其他算法更加简单，更加容易理解；它的算法描述足以实现一个现实的系统；它有好多开源的实现并且在很多公司里使用；它的安全性已经被证明；它的效率和其他算法比起来也不相上下。</p><p>接下来，这篇论文会介绍以下内容：复制状态机问题（第 2 节），讨论 Paxos 的优点和缺点（第 3 节），讨论我们为了可理解性而采取的方法（第 4 节），阐述 Raft 一致性算法（第 5-8 节），评价 Raft 算法（第 9 节），以及一些相关的工作（第 10 节）。</p><h2 id="2-复制状态机"><a href="#2-复制状态机" class="headerlink" title="2 复制状态机"></a>2 复制状态机</h2><p>一致性算法是从复制状态机的背景下提出的（参考英文原文引用37）。在这种方法中，一组服务器上的状态机产生相同状态的副本，并且在一些机器宕掉的情况下也可以继续运行。复制状态机在分布式系统中被用于解决很多容错的问题。例如，大规模的系统中通常都有一个集群领导者，像 GFS、HDFS 和 RAMCloud，典型应用就是一个独立的的复制状态机去管理领导选举和存储配置信息并且在领导人宕机的情况下也要存活下来。比如 Chubby 和 ZooKeeper。</p><p><img src="/images/raft-图1.png" alt=""></p><blockquote><p>图 1 ：复制状态机的结构。一致性算法管理着来自客户端指令的复制日志。状态机从日志中处理相同顺序的相同指令，所以产生的结果也是相同的。</p></blockquote><p>复制状态机通常都是基于复制日志实现的，如图 1。每一个服务器存储一个包含一系列指令的日志，并且按照日志的顺序进行执行。每一个日志都按照相同的顺序包含相同的指令，所以每一个服务器都执行相同的指令序列。因为每个状态机都是确定的，每一次执行操作都产生相同的状态和同样的序列。</p><p>保证复制日志相同就是一致性算法的工作了。在一台服务器上，一致性模块接收客户端发送来的指令然后增加到自己的日志中去。它和其他服务器上的一致性模块进行通信来保证每一个服务器上的日志最终都以相同的顺序包含相同的请求，尽管有些服务器会宕机。一旦指令被正确的复制，每一个服务器的状态机按照日志顺序处理他们，然后输出结果被返回给客户端。因此，服务器集群看起来形成一个高可靠的状态机。</p><p>实际系统中使用的一致性算法通常含有以下特性：</p><ul><li>安全性保证（绝对不会返回一个错误的结果）：在非拜占庭错误情况下，包括网络延迟、分区、丢包、冗余和乱序等错误都可以保证正确。</li><li>可用性：集群中只要有大多数的机器可运行并且能够相互通信、和客户端通信，就可以保证可用。因此，一个典型的包含 5 个节点的集群可以容忍两个节点的失败。服务器被停止就认为是失败。他们当有稳定的存储的时候可以从状态中恢复回来并重新加入集群。</li><li>不依赖时序来保证一致性：物理时钟错误或者极端的消息延迟只有在最坏情况下才会导致可用性问题。</li><li>通常情况下，一条指令可以尽可能快的在集群中大多数节点响应一轮远程过程调用时完成。小部分比较慢的节点不会影响系统整体的性能。</li></ul><h2 id="3-Paxos-算法的问题"><a href="#3-Paxos-算法的问题" class="headerlink" title="3 Paxos 算法的问题"></a>3 Paxos 算法的问题</h2><p>在过去的 10 年里，Leslie Lamport 的 Paxos 算法几乎已经成为一致性的代名词：Paxos 是在课程教学中最经常使用的算法，同时也是大多数一致性算法实现的起点。Paxos 首先定义了一个能够达成单一决策一致的协议，比如单条的复制日志项。我们把这一子集叫做单决策 Paxos。然后通过组合多个 Paxos 协议的实例来促进一系列决策的达成。Paxos 保证安全性和活性，同时也支持集群成员关系的变更。Paxos 的正确性已经被证明，在通常情况下也很高效。</p><p>不幸的是，Paxos 有两个明显的缺点。第一个缺点是 Paxos 算法特别的难以理解。完整的解释是出了名的不透明；通过极大的努力之后，也只有少数人成功理解了这个算法。因此，有了几次用更简单的术语来解释 Paxos 的尝试。尽管这些解释都只关注了单决策的子集问题，但依然很具有挑战性。在 2012 年 NSDI 的会议中的一次调查显示，很少有人对 Paxos 算法感到满意，甚至在经验老道的研究者中也是如此。我们自己也尝试去理解 Paxos；我们一直没能理解 Paxos 直到我们读了很多对 Paxos 的简化解释并且设计了我们自己的算法之后，这一过程花了近一年时间。</p><p>我们假设 Paxos 的不透明性来自它选择单决策问题作为它的基础。单决策 Paxos 是晦涩微妙的，它被划分成了两种没有简单直观解释和无法独立理解的情景。因此，这导致了很难建立起直观的感受为什么单决策 Paxos 算法能够工作。构成多决策 Paxos 增加了很多错综复杂的规则。我们相信，在多决策上达成一致性的问题（一份日志而不是单一的日志记录）能够被分解成其他的方式并且更加直接和明显。</p><p>Paxos算法的第二个问题就是它没有提供一个足够好的用来构建一个现实系统的基础。一个原因是还没有一种被广泛认同的多决策问题的算法。Lamport 的描述基本上都是关于单决策 Paxos 的；他简要描述了实施多决策 Paxos 的方法，但是缺乏很多细节。当然也有很多具体化 Paxos 的尝试，但是他们都互相不一样，和 Paxos 的概述也不同。例如 Chubby 这样的系统实现了一个类似于 Paxos 的算法，但是大多数的细节并没有被公开。</p><p>而且，Paxos 算法的结构也不是十分易于构建实践的系统；单决策分解也会产生其他的结果。例如，独立的选择一组日志条目然后合并成一个序列化的日志并没有带来太多的好处，仅仅增加了不少复杂性。围绕着日志来设计一个系统是更加简单高效的；新日志条目以严格限制的顺序增添到日志中去。另一个问题是，Paxos 使用了一种对等的点对点的方式作为它的核心（尽管它最终提议了一种弱领导人的方法来优化性能）。在只有一个决策会被制定的简化世界中是很有意义的，但是很少有现实的系统使用这种方式。如果有一系列的决策需要被制定，首先选择一个领导人，然后让他去协调所有的决议，会更加简单快速。</p><p>因此，实际的系统中很少有和 Paxos 相似的实践。每一种实现都是从 Paxos 开始研究，然后发现很多实现上的难题，再然后开发了一种和 Paxos 明显不一样的结构。这样是非常费时和容易出错的，并且理解 Paxos 的难度使得这个问题更加糟糕。Paxos 算法在理论上被证明是正确可行的，但是现实的系统和 Paxos 差别是如此的大，以至于这些证明没有什么太大的价值。下面来自 Chubby 实现非常典型：</p><blockquote><p>在Paxos算法描述和实现现实系统中间有着巨大的鸿沟。最终的系统建立在一种没有经过证明的算法之上。</p></blockquote><p>由于以上问题，我们认为 Paxos 算法既没有提供一个良好的基础给实践的系统，也没有给教学很好的帮助。基于一致性问题在大规模软件系统中的重要性，我们决定看看我们是否可以设计一个拥有更好特性的替代 Paxos 的一致性算法。Raft算法就是这次实验的结果。</p><h2 id="4-为了可理解性的设计"><a href="#4-为了可理解性的设计" class="headerlink" title="4 为了可理解性的设计"></a>4 为了可理解性的设计</h2><p>设计 Raft 算法我们有几个初衷：它必须提供一个完整的实际的系统实现基础，这样才能大大减少开发者的工作；它必须在任何情况下都是安全的并且在大多数的情况下都是可用的；并且它的大部分操作必须是高效的。但是我们最重要也是最大的挑战是可理解性。它必须保证对于普遍的人群都可以十分容易的去理解。另外，它必须能够让人形成直观的认识，这样系统的构建者才能够在现实中进行必然的扩展。</p><p>在设计 Raft 算法的时候，有很多的点需要我们在各种备选方案中进行选择。在这种情况下，我们评估备选方案基于可理解性原则：解释各个备选方案有多大的难度（例如，Raft 的状态空间有多复杂，是否有微妙的暗示）？对于一个读者而言，完全理解这个方案和暗示是否容易？</p><p>我们意识到对这种可理解性分析上具有高度的主观性；尽管如此，我们使用了两种通常适用的技术来解决这个问题。第一个技术就是众所周知的问题分解：只要有可能，我们就将问题分解成几个相对独立的，可被解决的、可解释的和可理解的子问题。例如，Raft 算法被我们分成领导人选举，日志复制，安全性和角色改变几个部分。</p><p>我们使用的第二个方法是通过减少状态的数量来简化需要考虑的状态空间，使得系统更加连贯并且在可能的时候消除不确定性。特别的，所有的日志是不允许有空洞的，并且 Raft 限制了日志之间变成不一致状态的可能。尽管在大多数情况下我们都试图去消除不确定性，但是也有一些情况下不确定性可以提升可理解性。尤其是，随机化方法增加了不确定性，但是他们有利于减少状态空间数量，通过处理所有可能选择时使用相似的方法。我们使用随机化去简化 Raft 中领导人选举算法。</p><h2 id="5-Raft-一致性算法"><a href="#5-Raft-一致性算法" class="headerlink" title="5 Raft 一致性算法"></a>5 Raft 一致性算法</h2><p>Raft 是一种用来管理章节 2 中描述的复制日志的算法。图 2 为了参考之用，总结这个算法的简略版本，图 3 列举了这个算法的一些关键特性。图中的这些元素会在剩下的章节逐一介绍。</p><p>Raft 通过选举一个高贵的领导人，然后给予他全部的管理复制日志的责任来实现一致性。领导人从客户端接收日志条目，把日志条目复制到其他服务器上，并且当保证安全性的时候告诉其他的服务器应用日志条目到他们的状态机中。拥有一个领导人大大简化了对复制日志的管理。例如，领导人可以决定新的日志条目需要放在日志中的什么位置而不需要和其他服务器商议，并且数据都从领导人流向其他服务器。一个领导人可以宕机，可以和其他服务器失去连接，这时一个新的领导人会被选举出来。</p><p>通过领导人的方式，Raft 将一致性问题分解成了三个相对独立的子问题，这些问题会在接下来的子章节中进行讨论：</p><ul><li><strong>领导选举</strong>：一个新的领导人需要被选举出来，当现存的领导人宕机的时候（章节 5.2）</li><li><strong>日志复制</strong>：领导人必须从客户端接收日志然后复制到集群中的其他节点，并且强制要求其他节点的日志保持和自己相同。</li><li><strong>安全性</strong>：在 Raft 中安全性的关键是在图 3 中展示的状态机安全：如果有任何的服务器节点已经应用了一个确定的日志条目到它的状态机中，那么其他服务器节点不能在同一个日志索引位置应用一个不同的指令。章节 5.4 阐述了 Raft 算法是如何保证这个特性的；这个解决方案涉及到一个额外的选举机制（5.2 节）上的限制。</li></ul><p>在展示一致性算法之后，这一章节会讨论可用性的一些问题和计时在系统的作用。</p><p><strong>状态</strong>：</p><table><thead><tr><th>状态</th><th>所有服务器上持久存在的</th></tr></thead><tbody><tr><td>currentTerm</td><td>服务器最后一次知道的任期号（初始化为 0，持续递增）</td></tr><tr><td>votedFor</td><td>在当前获得选票的候选人的 Id</td></tr><tr><td>log[]</td><td>日志条目集；每一个条目包含一个用户状态机执行的指令，和收到时的任期号</td></tr></tbody></table><table><thead><tr><th>状态</th><th>所有服务器上经常变的</th></tr></thead><tbody><tr><td>commitIndex</td><td>已知的最大的已经被提交的日志条目的索引值</td></tr><tr><td>lastApplied</td><td>最后被应用到状态机的日志条目索引值（初始化为 0，持续递增）</td></tr></tbody></table><table><thead><tr><th>状态</th><th>在领导人里经常改变的 （选举后重新初始化）</th></tr></thead><tbody><tr><td>nextIndex[]</td><td>对于每一个服务器，需要发送给他的下一个日志条目的索引值（初始化为领导人最后索引值加一）</td></tr><tr><td>matchIndex[]</td><td>对于每一个服务器，已经复制给他的日志的最高索引值</td></tr></tbody></table><p><strong>附加日志 RPC</strong>：</p><p>由领导人负责调用来复制日志指令；也会用作heartbeat</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>leaderId</td><td>领导人的 Id，以便于跟随者重定向请求</td></tr><tr><td>prevLogIndex</td><td>新的日志条目紧随之前的索引值</td></tr><tr><td>prevLogTerm</td><td>prevLogIndex 条目的任期号</td></tr><tr><td>entries[]</td><td>准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）</td></tr><tr><td>leaderCommit</td><td>领导人已经提交的日志的索引值</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前的任期号，用于领导人去更新自己</td></tr><tr><td>success</td><td>跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真</td></tr></tbody></table><p>接收者实现：</p><ol><li>如果 <code>term &lt; currentTerm</code> 就返回 false （5.1 节）</li><li>如果日志在 prevLogIndex 位置处的日志条目的任期号和 prevLogTerm 不匹配，则返回 false （5.3 节）</li><li>如果已经存在的日志条目和新的产生冲突（索引值相同但是任期号不同），删除这一条和之后所有的 （5.3 节）</li><li>附加日志中尚未存在的任何新条目</li><li>如果 <code>leaderCommit &gt; commitIndex</code>，令 commitIndex 等于 leaderCommit 和 新日志条目索引值中较小的一个</li></ol><p><strong>请求投票 RPC</strong>：</p><p>由候选人负责调用用来征集选票（5.2 节）</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>候选人的任期号</td></tr><tr><td>candidateId</td><td>请求选票的候选人的 Id</td></tr><tr><td>lastLogIndex</td><td>候选人的最后日志条目的索引值</td></tr><tr><td>lastLogTerm</td><td>候选人最后日志条目的任期号</td></tr></tbody></table><table><thead><tr><th>返回值</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前任期号，以便于候选人去更新自己的任期号</td></tr><tr><td>voteGranted</td><td>候选人赢得了此张选票时为真</td></tr></tbody></table><p>接收者实现：</p><ol><li>如果<code>term &lt; currentTerm</code>返回 false （5.2 节）</li><li>如果 votedFor 为空或者为 candidateId，并且候选人的日志至少和自己一样新，那么就投票给他（5.2 节，5.4 节）</li></ol><p><strong>所有服务器需遵守的规则</strong>：</p><p>所有服务器：</p><ul><li>如果<code>commitIndex &gt; lastApplied</code>，那么就 lastApplied 加一，并把<code>log[lastApplied]</code>应用到状态机中（5.3 节）</li><li>如果接收到的 RPC 请求或响应中，任期号<code>T &gt; currentTerm</code>，那么就令 currentTerm 等于 T，并切换状态为跟随者（5.1 节）</li></ul><p>跟随者（5.2 节）：</p><ul><li>响应来自候选人和领导者的请求</li><li>如果在超过选举超时时间的情况之前都没有收到领导人的心跳，或者是候选人请求投票的，就自己变成候选人</li></ul><p>候选人（5.2 节）：</p><ul><li>在转变成候选人后就立即开始选举过程<ul><li>自增当前的任期号（currentTerm）</li><li>给自己投票</li><li>重置选举超时计时器</li><li>发送请求投票的 RPC 给其他所有服务器</li></ul></li><li>如果接收到大多数服务器的选票，那么就变成领导人</li><li>如果接收到来自新的领导人的附加日志 RPC，转变成跟随者</li><li>如果选举过程超时，再次发起一轮选举</li></ul><p>领导人：</p><ul><li>一旦成为领导人：发送空的附加日志 RPC（心跳）给其他所有的服务器；在一定的空余时间之后不停的重复发送，以阻止跟随者超时（5.2 节）</li><li>如果接收到来自客户端的请求：附加条目到本地日志中，在条目被应用到状态机后响应客户端（5.3 节）</li><li>如果对于一个跟随者，最后日志条目的索引值大于等于 nextIndex，那么：发送从 nextIndex 开始的所有日志条目：<ul><li>如果成功：更新相应跟随者的 nextIndex 和 matchIndex</li><li>如果因为日志不一致而失败，减少 nextIndex 重试</li></ul></li><li>如果存在一个满足<code>N &gt; commitIndex</code>的 N，并且大多数的<code>matchIndex[i] ≥ N</code>成立，并且<code>log[N].term == currentTerm</code>成立，那么令 commitIndex 等于这个 N （5.3 和 5.4 节）</li></ul><p><img src="/images/raft-图2.png" alt=""></p><blockquote><p>图 2：一个关于 Raft 一致性算法的浓缩总结（不包括成员变换和日志压缩）。</p></blockquote><table><thead><tr><th>特性</th><th>解释</th></tr></thead><tbody><tr><td>选举安全特性</td><td>对于一个给定的任期号，最多只会有一个领导人被选举出来（5.2 节）</td></tr><tr><td>领导人只附加原则</td><td>领导人绝对不会删除或者覆盖自己的日志，只会增加（5.3 节）</td></tr><tr><td>日志匹配原则</td><td>如果两个日志在相同的索引位置的日志条目的任期号相同，那么我们就认为这个日志从头到这个索引位置之间全部完全相同（5.3 节）</td></tr><tr><td>领导人完全特性</td><td>如果某个日志条目在某个任期号中已经被提交，那么这个条目必然出现在更大任期号的所有领导人中（5.4 节）</td></tr><tr><td>状态机安全特性</td><td>如果一个领导人已经在给定的索引值位置的日志条目应用到状态机中，那么其他任何的服务器在这个索引位置不会提交一个不同的日志（5.4.3 节）</td></tr></tbody></table><p><img src="/images/raft-图3.png" alt=""></p><blockquote><p>图 3：Raft 在任何时候都保证以上的各个特性。</p></blockquote><h3 id="5-1-Raft-基础"><a href="#5-1-Raft-基础" class="headerlink" title="5.1 Raft 基础"></a>5.1 Raft 基础</h3><p>一个 Raft 集群包含若干个服务器节点；通常是 5 个，这允许整个系统容忍 2 个节点的失效。在任何时刻，每一个服务器节点都处于这三个状态之一：领导人、跟随者或者候选人。在通常情况下，系统中只有一个领导人并且其他的节点全部都是跟随者。跟随者都是被动的：他们不会发送任何请求，只是简单的响应来自领导者或者候选人的请求。领导人处理所有的客户端请求（如果一个客户端和跟随者联系，那么跟随者会把请求重定向给领导人）。第三种状态，候选人，是用来在 5.2 节描述的选举新领导人时使用。图 4 展示了这些状态和他们之间的转换关系；这些转换关系会在接下来进行讨论。</p><p><img src="/images/raft-图4.png" alt=""></p><blockquote><p>图 4：服务器状态。跟随者只响应来自其他服务器的请求。如果跟随者接收不到消息，那么他就会变成候选人并发起一次选举。获得集群中大多数选票的候选人将成为领导者。在一个任期内，领导人一直都会是领导人直到自己宕机了。</p></blockquote><p><img src="/images/raft-图5.png" alt=""></p><blockquote><p>图 5：时间被划分成一个个的任期，每个任期开始都是一次选举。在选举成功后，领导人会管理整个集群直到任期结束。有时候选举会失败，那么这个任期就会没有领导人而结束。任期之间的切换可以在不同的时间不同的服务器上观察到。</p></blockquote><p>Raft 把时间分割成任意长度的<strong>任期</strong>，如图 5。任期用连续的整数标记。每一段任期从一次<strong>选举</strong>开始，就像章节 5.2 描述的一样，一个或者多个候选人尝试成为领导者。如果一个候选人赢得选举，然后他就在接下来的任期内充当领导人的职责。在某些情况下，一次选举过程会造成选票的瓜分。在这种情况下，这一任期会以没有领导人结束；一个新的任期（和一次新的选举）会很快重新开始。Raft 保证了在一个给定的任期内，最多只有一个领导者。</p><p>不同的服务器节点可能多次观察到任期之间的转换，但在某些情况下，一个节点也可能观察不到任何一次选举或者整个任期全程。任期在 Raft 算法中充当逻辑时钟的作用，这会允许服务器节点查明一些过期的信息比如陈旧的领导者。每一个节点存储一个当前任期号，这一编号在整个时期内单调的增长。当服务器之间通信的时候会交换当前任期号；如果一个服务器的当前任期号比其他人小，那么他会更新自己的编号到较大的编号值。如果一个候选人或者领导者发现自己的任期号过期了，那么他会立即恢复成跟随者状态。如果一个节点接收到一个包含过期的任期号的请求，那么他会直接拒绝这个请求。</p><p>Raft 算法中服务器节点之间通信使用远程过程调用（RPCs），并且基本的一致性算法只需要两种类型的 RPCs。请求投票（RequestVote） RPCs 由候选人在选举期间发起（章节 5.2），然后附加条目（AppendEntries）RPCs 由领导人发起，用来复制日志和提供一种心跳机制（章节 5.3）。第 7 节为了在服务器之间传输快照增加了第三种 RPC。当服务器没有及时的收到 RPC 的响应时，会进行重试， 并且他们能够并行的发起 RPCs 来获得最佳的性能。</p><h3 id="5-2-领导人选举"><a href="#5-2-领导人选举" class="headerlink" title="5.2 领导人选举"></a>5.2 领导人选举</h3><p>Raft 使用一种心跳机制来触发领导人选举。当服务器程序启动时，他们都是跟随者身份。一个服务器节点继续保持着跟随者状态只要他从领导人或者候选者处接收到有效的 RPCs。领导者周期性的向所有跟随者发送心跳包（即不包含日志项内容的附加日志项 RPCs）来维持自己的权威。如果一个跟随者在一段时间里没有接收到任何消息，也就是<strong>选举超时</strong>，那么他就会认为系统中没有可用的领导者,并且发起选举以选出新的领导者。</p><p>要开始一次选举过程，跟随者先要增加自己的当前任期号并且转换到候选人状态。然后他会并行的向集群中的其他服务器节点发送请求投票的 RPCs 来给自己投票。候选人会继续保持着当前状态直到以下三件事情之一发生：(a) 他自己赢得了这次的选举，(b) 其他的服务器成为领导者，(c) 一段时间之后没有任何一个获胜的人。这些结果会分别的在下面的段落里进行讨论。</p><p>当一个候选人从整个集群的大多数服务器节点获得了针对同一个任期号的选票，那么他就赢得了这次选举并成为领导人。每一个服务器最多会对一个任期号投出一张选票，按照先来先服务的原则（注意：5.4 节在投票上增加了一点额外的限制）。要求大多数选票的规则确保了最多只会有一个候选人赢得此次选举（图 3 中的选举安全性）。一旦候选人赢得选举，他就立即成为领导人。然后他会向其他的服务器发送心跳消息来建立自己的权威并且阻止新的领导人的产生。</p><p>在等待投票的时候，候选人可能会从其他的服务器接收到声明它是领导人的附加日志项 RPC。如果这个领导人的任期号（包含在此次的 RPC中）不小于候选人当前的任期号，那么候选人会承认领导人合法并回到跟随者状态。 如果此次 RPC 中的任期号比自己小，那么候选人就会拒绝这次的 RPC 并且继续保持候选人状态。</p><p>第三种可能的结果是候选人既没有赢得选举也没有输：如果有多个跟随者同时成为候选人，那么选票可能会被瓜分以至于没有候选人可以赢得大多数人的支持。当这种情况发生的时候，每一个候选人都会超时，然后通过增加当前任期号来开始一轮新的选举。然而，没有其他机制的话，选票可能会被无限的重复瓜分。</p><p>Raft 算法使用随机选举超时时间的方法来确保很少会发生选票瓜分的情况，就算发生也能很快的解决。为了阻止选票起初就被瓜分，选举超时时间是从一个固定的区间（例如 150-300 毫秒）随机选择。这样可以把服务器都分散开以至于在大多数情况下只有一个服务器会选举超时；然后他赢得选举并在其他服务器超时之前发送心跳包。同样的机制被用在选票瓜分的情况下。每一个候选人在开始一次选举的时候会重置一个随机的选举超时时间，然后在超时时间内等待投票的结果；这样减少了在新的选举中另外的选票瓜分的可能性。9.3 节展示了这种方案能够快速的选出一个领导人。</p><p>领导人选举这个例子，体现了可理解性原则是如何指导我们进行方案设计的。起初我们计划使用一种排名系统：每一个候选人都被赋予一个唯一的排名，供候选人之间竞争时进行选择。如果一个候选人发现另一个候选人拥有更高的排名，那么他就会回到跟随者状态，这样高排名的候选人能够更加容易的赢得下一次选举。但是我们发现这种方法在可用性方面会有一点问题（如果高排名的服务器宕机了，那么低排名的服务器可能会超时并再次进入候选人状态。而且如果这个行为发生得足够快，则可能会导致整个选举过程都被重置掉）。我们针对算法进行了多次调整，但是每次调整之后都会有新的问题。最终我们认为随机重试的方法是更加明显和易于理解的。</p><h3 id="5-3-日志复制"><a href="#5-3-日志复制" class="headerlink" title="5.3 日志复制"></a>5.3 日志复制</h3><p>一旦一个领导人被选举出来，他就开始为客户端提供服务。客户端的每一个请求都包含一条被复制状态机执行的指令。领导人把这条指令作为一条新的日志条目附加到日志中去，然后并行的发起附加条目 RPCs 给其他的服务器，让他们复制这条日志条目。当这条日志条目被安全的复制（下面会介绍），领导人会应用这条日志条目到它的状态机中然后把执行的结果返回给客户端。如果跟随者崩溃或者运行缓慢，再或者网络丢包，领导人会不断的重复尝试附加日志条目 RPCs （尽管已经回复了客户端）直到所有的跟随者都最终存储了所有的日志条目。</p><p><img src="/images/raft-图6.png" alt=""></p><blockquote><p>图 6：日志由有序序号标记的条目组成。每个条目都包含创建时的任期号（图中框中的数字），和一个状态机需要执行的指令。一个条目当可以安全的被应用到状态机中去的时候，就认为是可以提交了。</p></blockquote><p>日志以图 6 展示的方式组织。每一个日志条目存储一条状态机指令和从领导人收到这条指令时的任期号。日志中的任期号用来检查是否出现不一致的情况，同时也用来保证图 3 中的某些性质。每一条日志条目同时也都有一个整数索引值来表明它在日志中的位置。</p><p>领导人来决定什么时候把日志条目应用到状态机中是安全的；这种日志条目被称为<strong>已提交</strong>。Raft 算法保证所有已提交的日志条目都是持久化的并且最终会被所有可用的状态机执行。在领导人将创建的日志条目复制到大多数的服务器上的时候，日志条目就会被提交（例如在图 6 中的条目 7）。同时，领导人的日志中之前的所有日志条目也都会被提交，包括由其他领导人创建的条目。5.4 节会讨论某些当在领导人改变之后应用这条规则的隐晦内容，同时他也展示了这种提交的定义是安全的。领导人跟踪了最大的将会被提交的日志项的索引，并且索引值会被包含在未来的所有附加日志 RPCs （包括心跳包），这样其他的服务器才能最终知道领导人的提交位置。一旦跟随者知道一条日志条目已经被提交，那么他也会将这个日志条目应用到本地的状态机中（按照日志的顺序）。</p><p>我们设计了 Raft 的日志机制来维护一个不同服务器的日志之间的高层次的一致性。这么做不仅简化了系统的行为也使得更加可预计，同时他也是安全性保证的一个重要组件。Raft 维护着以下的特性，这些同时也组成了图 3 中的日志匹配特性：</p><ul><li>如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们存储了相同的指令。</li><li>如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们之前的所有日志条目也全部相同。</li></ul><p>第一个特性来自这样的一个事实，领导人最多在一个任期里在指定的一个日志索引位置创建一条日志条目，同时日志条目在日志中的位置也从来不会改变。第二个特性由附加日志 RPC 的一个简单的一致性检查所保证。在发送附加日志 RPC 的时候，领导人会把新的日志条目紧接着之前的条目的索引位置和任期号包含在里面。如果跟随者在它的日志中找不到包含相同索引位置和任期号的条目，那么他就会拒绝接收新的日志条目。一致性检查就像一个归纳步骤：一开始空的日志状态肯定是满足日志匹配特性的，然后一致性检查保护了日志匹配特性当日志扩展的时候。因此，每当附加日志 RPC 返回成功时，领导人就知道跟随者的日志一定是和自己相同的了。</p><p>在正常的操作中，领导人和跟随者的日志保持一致性，所以附加日志 RPC 的一致性检查从来不会失败。然而，领导人崩溃的情况会使得日志处于不一致的状态（老的领导人可能还没有完全复制所有的日志条目）。这种不一致问题会在领导人和跟随者的一系列崩溃下加剧。图 7 展示了跟随者的日志可能和新的领导人不同的方式。跟随者可能会丢失一些在新的领导人中有的日志条目，他也可能拥有一些领导人没有的日志条目，或者两者都发生。丢失或者多出日志条目可能会持续多个任期。</p><p><img src="/images/raft-图7.png" alt=""></p><blockquote><p>图 7：当一个领导人成功当选时，跟随者可能是任何情况（a-f）。每一个盒子表示是一个日志条目；里面的数字表示任期号。跟随者可能会缺少一些日志条目（a-b），可能会有一些未被提交的日志条目（c-d），或者两种情况都存在（e-f）。例如，场景 f 可能会这样发生，某服务器在任期 2 的时候是领导人，已附加了一些日志条目到自己的日志中，但在提交之前就崩溃了；很快这个机器就被重启了，在任期 3 重新被选为领导人，并且又增加了一些日志条目到自己的日志中；在任期 2 和任期 3 的日志被提交之前，这个服务器又宕机了，并且在接下来的几个任期里一直处于宕机状态。</p></blockquote><p>在 Raft 算法中，领导人处理不一致是通过强制跟随者直接复制自己的日志来解决了。这意味着在跟随者中的冲突的日志条目会被领导人的日志覆盖。5.4 节会阐述如何通过增加一些限制来使得这样的操作是安全的。</p><p>要使得跟随者的日志进入和自己一致的状态，领导人必须找到最后两者达成一致的地方，然后删除从那个点之后的所有日志条目，发送自己的日志给跟随者。所有的这些操作都在进行附加日志 RPCs 的一致性检查时完成。领导人针对每一个跟随者维护了一个 <strong>nextIndex</strong>，这表示下一个需要发送给跟随者的日志条目的索引地址。当一个领导人刚获得权力的时候，他初始化所有的 nextIndex 值为自己的最后一条日志的index加1（图 7 中的 11）。如果一个跟随者的日志和领导人不一致，那么在下一次的附加日志 RPC 时的一致性检查就会失败。在被跟随者拒绝之后，领导人就会减小 nextIndex 值并进行重试。最终 nextIndex 会在某个位置使得领导人和跟随者的日志达成一致。当这种情况发生，附加日志 RPC 就会成功，这时就会把跟随者冲突的日志条目全部删除并且加上领导人的日志。一旦附加日志 RPC 成功，那么跟随者的日志就会和领导人保持一致，并且在接下来的任期里一直继续保持。</p><p>如果需要的话，算法可以通过减少被拒绝的附加日志 RPCs 的次数来优化。例如，当附加日志 RPC 的请求被拒绝的时候，跟随者可以包含冲突的条目的任期号和自己存储的那个任期的最早的索引地址。借助这些信息，领导人可以减小 nextIndex 越过所有那个任期冲突的所有日志条目；这样就变成每个任期需要一次附加条目 RPC 而不是每个条目一次。在实践中，我们十分怀疑这种优化是否是必要的，因为失败是很少发生的并且也不大可能会有这么多不一致的日志。</p><p>通过这种机制，领导人在获得权力的时候就不需要任何特殊的操作来恢复一致性。他只需要进行正常的操作，然后日志就能自动的在回复附加日志 RPC 的一致性检查失败的时候自动趋于一致。领导人从来不会覆盖或者删除自己的日志（图 3 的领导人只附加特性）。</p><p>日志复制机制展示出了第 2 节中形容的一致性特性：Raft 能够接受，复制并应用新的日志条目只要大部分的机器是工作的；在通常的情况下，新的日志条目可以在一次 RPC 中被复制给集群中的大多数机器；并且单个的缓慢的跟随者不会影响整体的性能。</p><h3 id="5-4-安全性"><a href="#5-4-安全性" class="headerlink" title="5.4 安全性"></a>5.4 安全性</h3><p>前面的章节里描述了 Raft 算法是如何选举和复制日志的。然而，到目前为止描述的机制并不能充分的保证每一个状态机会按照相同的顺序执行相同的指令。例如，一个跟随者可能会进入不可用状态同时领导人已经提交了若干的日志条目，然后这个跟随者可能会被选举为领导人并且覆盖这些日志条目；因此，不同的状态机可能会执行不同的指令序列。</p><p>这一节通过在领导选举的时候增加一些限制来完善 Raft 算法。这一限制保证了任何的领导人对于给定的任期号，都拥有了之前任期的所有被提交的日志条目（图 3 中的领导人完整特性）。增加这一选举时的限制，我们对于提交时的规则也更加清晰。最终，我们将展示对于领导人完整特性的简要证明，并且说明领导人是如何领导复制状态机的做出正确行为的。</p><h4 id="5-4-1-选举限制"><a href="#5-4-1-选举限制" class="headerlink" title="5.4.1 选举限制"></a>5.4.1 选举限制</h4><p>在任何基于领导人的一致性算法中，领导人都必须存储所有已经提交的日志条目。在某些一致性算法中，例如 Viewstamped Replication，某个节点即使是一开始并没有包含所有已经提交的日志条目，它也能被选为领导者。这些算法都包含一些额外的机制来识别丢失的日志条目并把他们传送给新的领导人，要么是在选举阶段要么在之后很快进行。不幸的是，这种方法会导致相当大的额外的机制和复杂性。Raft 使用了一种更加简单的方法，它可以保证所有之前的任期号中已经提交的日志条目在选举的时候都会出现在新的领导人中，不需要传送这些日志条目给领导人。这意味着日志条目的传送是单向的，只从领导人传给跟随者，并且领导人从不会覆盖自身本地日志中已经存在的条目。</p><p>Raft 使用投票的方式来阻止一个候选人赢得选举除非这个候选人包含了所有已经提交的日志条目。候选人为了赢得选举必须联系集群中的大部分节点，这意味着每一个已经提交的日志条目在这些服务器节点中肯定存在于至少一个节点上。如果候选人的日志至少和大多数的服务器节点一样新（这个新的定义会在下面讨论），那么他一定持有了所有已经提交的日志条目。请求投票 RPC 实现了这样的限制： RPC 中包含了候选人的日志信息，然后投票人会拒绝掉那些日志没有自己新的投票请求。</p><p>Raft 通过比较两份日志中最后一条日志条目的索引值和任期号定义谁的日志比较新。如果两份日志最后的条目的任期号不同，那么任期号大的日志更加新。如果两份日志最后的条目任期号相同，那么日志比较长的那个就更加新。</p><h4 id="5-4-2-提交之前任期内的日志条目"><a href="#5-4-2-提交之前任期内的日志条目" class="headerlink" title="5.4.2 提交之前任期内的日志条目"></a>5.4.2 提交之前任期内的日志条目</h4><p>如同 5.3 节介绍的那样，领导人知道一条当前任期内的日志记录是可以被提交的，只要它被存储到了大多数的服务器上。如果一个领导人在提交日志条目之前崩溃了，未来后续的领导人会继续尝试复制这条日志记录。然而，一个领导人不能断定一个之前任期里的日志条目被保存到大多数服务器上的时候就一定已经提交了。图 8 展示了一种情况，一条已经被存储到大多数节点上的老日志条目，也依然有可能会被未来的领导人覆盖掉。</p><p><img src="/images/raft-图8.png" alt=""></p><blockquote><p>图 8：如图的时间序列展示了为什么领导人无法决定对老任期号的日志条目进行提交。在 (a) 中，S1 是领导者，部分的复制了索引位置 2 的日志条目。在 (b) 中，S1 崩溃了，然后 S5 在任期 3 里通过 S3、S4 和自己的选票赢得选举，然后从客户端接收了一条不一样的日志条目放在了索引 2 处。然后到 (c)，S5 又崩溃了；S1 重新启动，选举成功，开始复制日志。在这时，来自任期 2 的那条日志已经被复制到了集群中的大多数机器上，但是还没有被提交。如果 S1 在 (d) 中又崩溃了，S5 可以重新被选举成功（通过来自 S2，S3 和 S4 的选票），然后覆盖了他们在索引 2 处的日志。反之，如果在崩溃之前，S1 把自己主导的新任期里产生的日志条目复制到了大多数机器上，就如 (e) 中那样，那么在后面任期里面这些新的日志条目就会被提交（因为S5 就不可能选举成功）。 这样在同一时刻就同时保证了，之前的所有老的日志条目就会被提交。</p></blockquote><p>为了消除图 8 里描述的情况，Raft 永远不会通过计算副本数目的方式去提交一个之前任期内的日志条目。只有领导人当前任期里的日志条目通过计算副本数目可以被提交；一旦当前任期的日志条目以这种方式被提交，那么由于日志匹配特性，之前的日志条目也都会被间接的提交。在某些情况下，领导人可以安全的知道一个老的日志条目是否已经被提交（例如，该条目是否存储到所有服务器上），但是 Raft 为了简化问题使用一种更加保守的方法。</p><p>当领导人复制之前任期里的日志时，Raft 会为所有日志保留原始的任期号, 这在提交规则上产生了额外的复杂性。在其他的一致性算法中，如果一个新的领导人要重新复制之前的任期里的日志时，它必须使用当前新的任期号。Raft 使用的方法更加容易辨别出日志，因为它可以随着时间和日志的变化对日志维护着同一个任期编号。另外，和其他的算法相比，Raft 中的新领导人只需要发送更少日志条目（其他算法中必须在他们被提交之前发送更多的冗余日志条目来为他们重新编号）。</p><h4 id="5-4-3-安全性论证"><a href="#5-4-3-安全性论证" class="headerlink" title="5.4.3 安全性论证"></a>5.4.3 安全性论证</h4><p>在给定了完整的 Raft 算法之后，我们现在可以更加精确的讨论领导人完整性特性（这一讨论基于 9.2 节的安全性证明）。我们假设领导人完全性特性是不存在的，然后我们推出矛盾来。假设任期 T 的领导人（领导人 T）在任期内提交了一条日志条目，但是这条日志条目没有被存储到未来某个任期的领导人的日志中。设大于 T 的最小任期 U 的领导人 U 没有这条日志条目。</p><p><img src="/images/raft-图9.png" alt=""></p><blockquote><p>图 9：如果 S1 （任期 T 的领导者）提交了一条新的日志在它的任期里，然后 S5 在之后的任期 U 里被选举为领导人，然后至少会有一个机器，如 S3，既拥有来自 S1 的日志，也给 S5 投票了。</p></blockquote><ol><li>在领导人 U 选举的时候一定没有那条被提交的日志条目（领导人从不会删除或者覆盖任何条目）。</li><li>领导人 T 复制这条日志条目给集群中的大多数节点，同时，领导人U 从集群中的大多数节点赢得了选票。因此，至少有一个节点（投票者、选民）同时接受了来自领导人T 的日志条目，并且给领导人U 投票了，如图 9。这个投票者是产生这个矛盾的关键。</li><li>这个投票者必须在给领导人 U 投票之前先接受了从领导人 T 发来的已经被提交的日志条目；否则他就会拒绝来自领导人 T 的附加日志请求（因为此时他的任期号会比 T 大）。</li><li>投票者在给领导人 U 投票时依然保存有这条日志条目，因为任何中间的领导人都包含该日志条目（根据上述的假设），领导人从不会删除条目，并且跟随者只有在和领导人冲突的时候才会删除条目。</li><li>投票者把自己选票投给领导人 U 时，领导人 U 的日志必须和投票者自己一样新。这就导致了两者矛盾之一。</li><li>首先，如果投票者和领导人 U 的最后一条日志的任期号相同，那么领导人 U 的日志至少和投票者一样长，所以领导人 U 的日志一定包含所有投票者的日志。这是另一处矛盾，因为投票者包含了那条已经被提交的日志条目，但是在上述的假设里，领导人 U 是不包含的。</li><li>除此之外，领导人 U 的最后一条日志的任期号就必须比投票人大了。此外，他也比 T 大，因为投票人的最后一条日志的任期号至少和 T 一样大（他包含了来自任期 T 的已提交的日志）。创建了领导人 U 最后一条日志的之前领导人一定已经包含了那条被提交的日志（根据上述假设，领导人 U 是第一个不包含该日志条目的领导人）。所以，根据日志匹配特性，领导人 U 一定也包含那条被提交的日志，这里产生矛盾。</li><li>这里完成了矛盾。因此，所有比 T 大的领导人一定包含了所有来自 T 的已经被提交的日志。</li><li>日志匹配原则保证了未来的领导人也同时会包含被间接提交的条目，例如图 8 (d) 中的索引 2。</li></ol><p>通过领导人完全特性，我们就能证明图 3 中的状态机安全特性，即如果服务器已经在某个给定的索引值应用了日志条目到自己的状态机里，那么其他的服务器不会应用一个不一样的日志到同一个索引值上。在一个服务器应用一条日志条目到他自己的状态机中时，他的日志必须和领导人的日志，在该条目和之前的条目上相同，并且已经被提交。现在我们来考虑在任何一个服务器应用一个指定索引位置的日志的最小任期；日志完全特性保证拥有更高任期号的领导人会存储相同的日志条目，所以之后的任期里应用某个索引位置的日志条目也会是相同的值。因此，状态机安全特性是成立的。</p><p>最后，Raft 要求服务器按照日志中索引位置顺序应用日志条目。和状态机安全特性结合起来看，这就意味着所有的服务器会应用相同的日志序列集到自己的状态机中，并且是按照相同的顺序。</p><h3 id="5-5-跟随者和候选人崩溃"><a href="#5-5-跟随者和候选人崩溃" class="headerlink" title="5.5 跟随者和候选人崩溃"></a>5.5 跟随者和候选人崩溃</h3><p>到目前为止，我们都只关注了领导人崩溃的情况。跟随者和候选人崩溃后的处理方式比领导人要简单的多，并且他们的处理方式是相同的。如果跟随者或者候选人崩溃了，那么后续发送给他们的 RPCs 都会失败。Raft 中处理这种失败就是简单的通过无限的重试；如果崩溃的机器重启了，那么这些 RPC 就会完整的成功。如果一个服务器在完成了一个 RPC，但是还没有响应的时候崩溃了，那么在他重新启动之后就会再次收到同样的请求。Raft 的 RPCs 都是幂等的，所以这样重试不会造成任何问题。例如一个跟随者如果收到附加日志请求但是他已经包含了这一日志，那么他就会直接忽略这个新的请求。</p><h3 id="5-6-时间和可用性"><a href="#5-6-时间和可用性" class="headerlink" title="5.6 时间和可用性"></a>5.6 时间和可用性</h3><p>Raft 的要求之一就是安全性不能依赖时间：整个系统不能因为某些事件运行的比预期快一点或者慢一点就产生了错误的结果。但是，可用性（系统可以及时的响应客户端）不可避免的要依赖于时间。例如，如果消息交换比服务器故障间隔时间长，候选人将没有足够长的时间来赢得选举；没有一个稳定的领导人，Raft 将无法工作。</p><p>领导人选举是 Raft 中对时间要求最为关键的方面。Raft 可以选举并维持一个稳定的领导人,只要系统满足下面的时间要求：</p><blockquote><p>广播时间（broadcastTime） &lt;&lt; 选举超时时间（electionTimeout） &lt;&lt; 平均故障间隔时间（MTBF）</p></blockquote><p>在这个不等式中，广播时间指的是从一个服务器并行的发送 RPCs 给集群中的其他服务器并接收响应的平均时间；选举超时时间就是在 5.2 节中介绍的选举的超时时间限制；然后平均故障间隔时间就是对于一台服务器而言，两次故障之间的平均时间。广播时间必须比选举超时时间小一个量级，这样领导人才能够发送稳定的心跳消息来阻止跟随者开始进入选举状态；通过随机化选举超时时间的方法，这个不等式也使得选票瓜分的情况变得不可能。选举超时时间应该要比平均故障间隔时间小上几个数量级，这样整个系统才能稳定的运行。当领导人崩溃后，整个系统会大约相当于选举超时的时间里不可用；我们希望这种情况在整个系统的运行中很少出现。</p><p>广播时间和平均故障间隔时间是由系统决定的，但是选举超时时间是我们自己选择的。Raft 的 RPCs 需要接收方将信息持久化的保存到稳定存储中去，所以广播时间大约是 0.5 毫秒到 20 毫秒，取决于存储的技术。因此，选举超时时间可能需要在 10 毫秒到 500 毫秒之间。大多数的服务器的平均故障间隔时间都在几个月甚至更长，很容易满足时间的需求。</p><h2 id="6-集群成员变化"><a href="#6-集群成员变化" class="headerlink" title="6 集群成员变化"></a>6 集群成员变化</h2><p>到目前为止，我们都假设集群的配置（加入到一致性算法的服务器集合）是固定不变的。但是在实践中，偶尔是会改变集群的配置的，例如替换那些宕机的机器或者改变复制级别。尽管可以通过暂停整个集群，更新所有配置，然后重启整个集群的方式来实现，但是在更改的时候集群会不可用。另外，如果存在手工操作步骤，那么就会有操作失误的风险。为了避免这样的问题，我们决定自动化配置改变并且将其纳入到 Raft 一致性算法中来。</p><p>为了让配置修改机制能够安全，那么在转换的过程中不能够存在任何时间点使得两个领导人同时被选举成功在同一个任期里。不幸的是，任何服务器直接从旧的配置直接转换到新的配置的方案都是不安全的。一次性自动的转换所有服务器是不可能的，所以在转换期间整个集群存在划分成两个独立的大多数群体的可能性（见图 10）。</p><p><img src="/images/raft-图10.png" alt=""></p><blockquote><p>图 10：直接从一种配置转到新的配置是十分不安全的，因为各个机器可能在任何的时候进行转换。在这个例子中，集群配额从 3 台机器变成了 5 台。不幸的是，存在这样的一个时间点，两个不同的领导人在同一个任期里都可以被选举成功。一个是通过旧的配置，一个通过新的配置。</p></blockquote><p>为了保证安全性，配置更改必须使用两阶段方法。目前有很多种两阶段的实现。例如，有些系统在第一阶段停掉旧的配置所以集群就不能处理客户端请求；然后在第二阶段在启用新的配置。在 Raft 中，集群先切换到一个过渡的配置，我们称之为共同一致；一旦共同一致已经被提交了，那么系统就切换到新的配置上。共同一致是老配置和新配置的结合：</p><ul><li>日志条目被复制给集群中新、老配置的所有服务器。</li><li>新、旧配置的服务器都可以成为领导人。</li><li>达成一致（针对选举和提交）需要分别在两种配置上获得大多数的支持。</li></ul><p>共同一致允许独立的服务器在不影响安全性的前提下，在不同的时间进行配置转换过程。此外，共同一致可以让集群在配置转换的过程人依然响应客户端的请求。</p><p>集群配置在复制日志中以特殊的日志条目来存储和通信；图 11 展示了配置转换的过程。当一个领导人接收到一个改变配置从 C-old 到 C-new 的请求，他会为了共同一致存储配置（图中的 C-old,new），以前面描述的日志条目和副本的形式。一旦一个服务器将新的配置日志条目增加到它的日志中，他就会用这个配置来做出未来所有的决定（服务器总是使用最新的配置，无论他是否已经被提交）。这意味着领导人要使用 C-old,new 的规则来决定日志条目 C-old,new 什么时候需要被提交。如果领导人崩溃了，被选出来的新领导人可能是使用 C-old 配置也可能是 C-old,new 配置，这取决于赢得选举的候选人是否已经接收到了 C-old,new 配置。在任何情况下， C-new 配置在这一时期都不会单方面的做出决定。</p><p>一旦 C-old,new 被提交，那么无论是 C-old 还是 C-new，在没有经过他人批准的情况下都不可能做出决定，并且领导人完全特性保证了只有拥有 C-old,new 日志条目的服务器才有可能被选举为领导人。这个时候，领导人创建一条关于 C-new 配置的日志条目并复制给集群就是安全的了。再者，每个服务器在见到新的配置的时候就会立即生效。当新的配置在 C-new 的规则下被提交，旧的配置就变得无关紧要，同时不使用新的配置的服务器就可以被关闭了。如图 11，C-old 和 C-new 没有任何机会同时做出单方面的决定；这保证了安全性。</p><p><img src="/images/raft-图11.png" alt=""></p><blockquote><p>图 11：一个配置切换的时间线。虚线表示已经被创建但是还没有被提交的条目，实线表示最后被提交的日志条目。领导人首先创建了 C-old,new 的配置条目在自己的日志中，并提交到 C-old,new 中（C-old 的大多数和 C-new 的大多数）。然后他创建 C-new 条目并提交到 C-new 中的大多数。这样就不存在 C-new 和 C-old 可以同时做出决定的时间点。</p></blockquote><p>在关于重新配置还有三个问题需要提出。第一个问题是，新的服务器可能初始化没有存储任何的日志条目。当这些服务器以这种状态加入到集群中，那么他们需要一段时间来更新追赶，这时还不能提交新的日志条目。为了避免这种可用性的间隔时间，Raft 在配置更新的时候使用了一种额外的阶段，在这个阶段，新的服务器以没有投票权身份加入到集群中来（领导人复制日志给他们，但是不考虑他们是大多数）。一旦新的服务器追赶上了集群中的其他机器，重新配置可以像上面描述的一样处理。</p><p>第二个问题是，集群的领导人可能不是新配置的一员。在这种情况下，领导人就会在提交了 C-new 日志之后退位（回到跟随者状态）。这意味着有这样的一段时间，领导人管理着集群，但是不包括他自己；他复制日志但是不把他自己算作是大多数之一。当 C-new 被提交时，会发生领导人过渡，因为这时是最早新的配置可以独立工作的时间点（将总是能够在 C-new 配置下选出新的领导人）。在此之前，可能只能从 C-old 中选出领导人。</p><p>第三个问题是，移除不在 C-new 中的服务器可能会扰乱集群。这些服务器将不会再接收到心跳，所以当选举超时，他们就会进行新的选举过程。他们会发送拥有新的任期号的请求投票 RPCs，这样会导致当前的领导人回退成跟随者状态。新的领导人最终会被选出来，但是被移除的服务器将会再次超时，然后这个过程会再次重复，导致整体可用性大幅降低。</p><p>为了避免这个问题，当服务器确认当前领导人存在时，服务器会忽略请求投票 RPCs。特别的，当服务器在当前最小选举超时时间内收到一个请求投票 RPC，他不会更新当前的任期号或者投出选票。这不会影响正常的选举，每个服务器在开始一次选举之前，至少等待一个最小选举超时时间。然而，这有利于避免被移除的服务器扰乱：如果领导人能够发送心跳给集群，那么他就不会被更大的任期号废黜。</p><h2 id="7-日志压缩"><a href="#7-日志压缩" class="headerlink" title="7 日志压缩"></a>7 日志压缩</h2><p>Raft 的日志在正常操作中不断的增长，但是在实际的系统中，日志不能无限制的增长。随着日志不断增长，他会占用越来越多的空间，花费越来越多的时间来重置。如果没有一定的机制去清除日志里积累的陈旧的信息，那么会带来可用性问题。</p><p>快照是最简单的压缩方法。在快照系统中，整个系统的状态都以快照的形式写入到稳定的持久化存储中，然后到那个时间点之前的日志全部丢弃。快照技术被使用在 Chubby 和 ZooKeeper 中，接下来的章节会介绍 Raft 中的快照技术。</p><p>增量压缩的方法，例如日志清理或者日志结构合并树，都是可行的。这些方法每次只对一小部分数据进行操作，这样就分散了压缩的负载压力。首先，他们先选择一个已经积累的大量已经被删除或者被覆盖对象的区域，然后重写那个区域还活跃的对象，之后释放那个区域。和简单操作整个数据集合的快照相比，需要增加复杂的机制来实现。状态机可以实现 LSM tree 使用和快照相同的接口，但是日志清除方法就需要修改 Raft 了。</p><p><img src="/images/raft-图12.png" alt=""></p><blockquote><p>图 12：一个服务器用新的快照替换了从 1 到 5 的条目，快照值存储了当前的状态。快照中包含了最后的索引位置和任期号。</p></blockquote><p>图 12 展示了 Raft 中快照的基础思想。每个服务器独立的创建快照，只包括已经被提交的日志。主要的工作包括将状态机的状态写入到快照中。Raft 也包含一些少量的元数据到快照中：<strong>最后被包含索引</strong>指的是被快照取代的最后的条目在日志中的索引值（状态机最后应用的日志），<strong>最后被包含的任期</strong>指的是该条目的任期号。保留这些数据是为了支持快照后紧接着的第一个条目的附加日志请求时的一致性检查，因为这个条目需要前一日志条目的索引值和任期号。为了支持集群成员更新（第 6 节），快照中也将最后的一次配置作为最后一个条目存下来。一旦服务器完成一次快照，他就可以删除最后索引位置之前的所有日志和快照了。</p><p>尽管通常服务器都是独立的创建快照，但是领导人必须偶尔的发送快照给一些落后的跟随者。这通常发生在当领导人已经丢弃了下一条需要发送给跟随者的日志条目的时候。幸运的是这种情况不是常规操作：一个与领导人保持同步的跟随者通常都会有这个条目。然而一个运行非常缓慢的跟随者或者新加入集群的服务器（第 6 节）将不会有这个条目。这时让这个跟随者更新到最新的状态的方式就是通过网络把快照发送给他们。</p><p><strong>安装快照 RPC</strong>：</p><p>由领导人调用以将快照的分块发送给跟随者。领导者总是按顺序发送分块。</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>领导人的任期号</td></tr><tr><td>leaderId</td><td>领导人的 Id，以便于跟随者重定向请求</td></tr><tr><td>lastIncludedIndex</td><td>快照中包含的最后日志条目的索引值</td></tr><tr><td>lastIncludedTerm</td><td>快照中包含的最后日志条目的任期号</td></tr><tr><td>offset</td><td>分块在快照中的字节偏移量</td></tr><tr><td>data[]</td><td>原始数据</td></tr><tr><td>done</td><td>如果这是最后一个分块则为 true</td></tr></tbody></table><table><thead><tr><th>结果</th><th>解释</th></tr></thead><tbody><tr><td>term</td><td>当前任期号（currentTerm），便于领导人更新自己</td></tr></tbody></table><p><strong>接收者实现</strong>：</p><ol><li>如果<code>term &lt; currentTerm</code>就立即回复</li><li>如果是第一个分块（offset 为 0）就创建一个新的快照</li><li>在指定偏移量写入数据</li><li>如果 done 是 false，则继续等待更多的数据</li><li>保存快照文件，丢弃具有较小索引的任何现有或部分快照</li><li>如果现存的日志条目与快照中最后包含的日志条目具有相同的索引值和任期号，则保留其后的日志条目并进行回复</li><li>丢弃整个日志</li><li>使用快照重置状态机（并加载快照的集群配置）</li></ol><p><img src="/images/raft-图13.png" alt=""></p><blockquote><p>图 13：一个关于安装快照的简要概述。为了便于传输，快照都是被分成分块的；每个分块都给了跟随者生命的迹象，所以跟随者可以重置选举超时计时器。</p></blockquote><p>在这种情况下领导人使用一种叫做安装快照的新的 RPC 来发送快照给太落后的跟随者；见图 13。当跟随者通过这种 RPC 接收到快照时，他必须自己决定对于已经存在的日志该如何处理。通常快照会包含没有在接收者日志中存在的信息。在这种情况下，跟随者丢弃其整个日志；它全部被快照取代，并且可能包含与快照冲突的未提交条目。如果接收到的快照是自己日志的前面部分（由于网络重传或者错误），那么被快照包含的条目将会被全部删除，但是快照后面的条目仍然有效，必须保留。</p><p>这种快照的方式背离了 Raft 的强领导人原则，因为跟随者可以在不知道领导人情况下创建快照。但是我们认为这种背离是值得的。领导人的存在，是为了解决在达成一致性的时候的冲突，但是在创建快照的时候，一致性已经达成，这时不存在冲突了，所以没有领导人也是可以的。数据依然是从领导人传给跟随者，只是跟随者可以重新组织他们的数据了。</p><p>我们考虑过一种替代的基于领导人的快照方案，即只有领导人创建快照，然后发送给所有的跟随者。但是这样做有两个缺点。第一，发送快照会浪费网络带宽并且延缓了快照处理的时间。每个跟随者都已经拥有了所有产生快照需要的信息，而且很显然，自己从本地的状态中创建快照比通过网络接收别人发来的要经济。第二，领导人的实现会更加复杂。例如，领导人需要发送快照的同时并行的将新的日志条目发送给跟随者，这样才不会阻塞新的客户端请求。</p><p>还有两个问题影响了快照的性能。首先，服务器必须决定什么时候应该创建快照。如果快照创建的过于频繁，那么就会浪费大量的磁盘带宽和其他资源；如果创建快照频率太低，他就要承受耗尽存储容量的风险，同时也增加了从日志重建的时间。一个简单的策略就是当日志大小达到一个固定大小的时候就创建一次快照。如果这个阈值设置的显著大于期望的快照的大小，那么快照对磁盘压力的影响就会很小了。</p><p>第二个影响性能的问题就是写入快照需要花费显著的一段时间，并且我们还不希望影响到正常操作。解决方案是通过写时复制的技术，这样新的更新就可以被接收而不影响到快照。例如，具有函数式数据结构的状态机天然支持这样的功能。另外，操作系统的写时复制技术的支持（如 Linux 上的 fork）可以被用来创建完整的状态机的内存快照（我们的实现就是这样的）。</p><h2 id="8-客户端交互"><a href="#8-客户端交互" class="headerlink" title="8 客户端交互"></a>8 客户端交互</h2><p>这一节将介绍客户端是如何和 Raft 进行交互的，包括客户端如何发现领导人和 Raft 是如何支持线性化语义的。这些问题对于所有基于一致性的系统都存在，并且 Raft 的解决方案和其他的也差不多。</p><p>Raft 中的客户端发送所有请求给领导人。当客户端启动的时候，他会随机挑选一个服务器进行通信。如果客户端第一次挑选的服务器不是领导人，那么那个服务器会拒绝客户端的请求并且提供他最近接收到的领导人的信息（附加条目请求包含了领导人的网络地址）。如果领导人已经崩溃了，那么客户端的请求就会超时；客户端之后会再次重试随机挑选服务器的过程。</p><p>我们 Raft 的目标是要实现线性化语义（每一次操作立即执行，只执行一次，在他调用和收到回复之间）。但是，如上述，Raft 是可以执行同一条命令多次的：例如，如果领导人在提交了这条日志之后，但是在响应客户端之前崩溃了，那么客户端会和新的领导人重试这条指令，导致这条命令就被再次执行了。解决方案就是客户端对于每一条指令都赋予一个唯一的序列号。然后，状态机跟踪每条指令最新的序列号和相应的响应。如果接收到一条指令，它的序列号已经被执行了，那么就立即返回结果，而不重新执行指令。</p><p>只读的操作可以直接处理而不需要记录日志。但是，在不增加任何限制的情况下，这么做可能会冒着返回脏数据的风险，因为领导人响应客户端请求时可能已经被新的领导人作废了，但是他还不知道。线性化的读操作必须不能返回脏数据，Raft 需要使用两个额外的措施在不使用日志的情况下保证这一点。首先，领导人必须有关于被提交日志的最新信息。领导人完全特性保证了领导人一定拥有所有已经被提交的日志条目，但是在他任期开始的时候，他可能不知道那些是已经被提交的。为了知道这些信息，他需要在他的任期里提交一条日志条目。Raft 中通过领导人在任期开始的时候提交一个空白的没有任何操作的日志条目到日志中去来实现。第二，领导人在处理只读的请求之前必须检查自己是否已经被废黜了（他自己的信息已经变脏了如果一个更新的领导人被选举出来）。Raft 中通过让领导人在响应只读请求之前，先和集群中的大多数节点交换一次心跳信息来处理这个问题。可选的，领导人可以依赖心跳机制来实现一种租约的机制，但是这种方法依赖时间来保证安全性（假设时间误差是有界的）。</p><h2 id="9-算法实现和评估"><a href="#9-算法实现和评估" class="headerlink" title="9 算法实现和评估"></a>9 算法实现和评估</h2><p>我们已经为 RAMCloud 实现了 Raft 算法作为存储配置信息的复制状态机的一部分，并且帮助 RAMCloud 协调故障转移。这个 Raft 实现包含大约 2000 行 C++ 代码，其中不包括测试、注释和空行。这些代码是开源的。同时也有大约 25 个其他独立的第三方的基于这篇论文草稿的开源实现，针对不同的开发场景。同时，很多公司已经部署了基于 Raft 的系统。</p><p>这一节会从三个方面来评估 Raft 算法：可理解性、正确性和性能。</p><h3 id="9-1-可理解性"><a href="#9-1-可理解性" class="headerlink" title="9.1 可理解性"></a>9.1 可理解性</h3><p>为了和 Paxos 比较 Raft 算法的可理解能力，我们针对高层次的本科生和研究生，在斯坦福大学的高级操作系统课程和加州大学伯克利分校的分布式计算课程上，进行了一次学习的实验。我们分别拍了针对 Raft 和 Paxos 的视频课程，并准备了相应的小测验。Raft 的视频讲课覆盖了这篇论文的所有内容除了日志压缩；Paxos 讲课包含了足够的资料来创建一个等价的复制状态机，包括单决策 Paxos，多决策 Paxos，重新配置和一些实际系统需要的性能优化（例如领导人选举）。小测验测试一些对算法的基本理解和解释一些边角的示例。每个学生都是看完第一个视频，回答相应的测试，再看第二个视频，回答相应的测试。大约有一半的学生先进行 Paxos 部分，然后另一半先进行 Raft 部分，这是为了说明两者从第一部分的算法学习中获得的表现和经验的差异。我们计算参加人员的每一个小测验的得分来看参与者是否在 Raft 算法上更加容易理解。</p><p>我们尽可能的使得 Paxos 和 Raft 的比较更加公平。这个实验偏爱 Paxos 表现在两个方面：43 个参加者中有 15 个人在之前有一些 Paxos 的经验，并且 Paxos 的视频要长 14%。如表格 1 总结的那样，我们采取了一些措施来减轻这种潜在的偏见。我们所有的材料都可供审查。</p><table><thead><tr><th>关心</th><th>缓和偏见采取的手段</th><th>可供查看的材料</th></tr></thead><tbody><tr><td>相同的讲课质量</td><td>两者使用同一个讲师。Paxos 使用的是现在很多大学里经常使用的。Paxos 会长 14%。</td><td>视频</td></tr><tr><td>相同的测验难度</td><td>问题以难度分组，在两个测验里成对出现。</td><td>小测验</td></tr><tr><td>公平评分</td><td>使用评价量规。随机顺序打分，两个测验交替进行。</td><td>评价量规（rubric）</td></tr></tbody></table><blockquote><p>表 1：考虑到可能会存在的偏见，对于每种情况的解决方法，和相应的材料。</p></blockquote><p>参加者平均在 Raft 的测验中比 Paxos 高 4.9 分（总分 60，那么 Raft 的平均得分是 25.7，而 Paxos 是 20.8）；图 14 展示了每个参与者的得分。配置t-检验（又称student‘s t-test）表明，在 95% 的可信度下，真实的 Raft 分数分布至少比 Paxos 高 2.5 分。</p><p><img src="/images/raft-图14.png" alt=""></p><blockquote><p>图 14：一个散点图表示了 43 个学生在 Paxos 和 Raft 的小测验中的成绩。在对角线之上的点表示在 Raft 获得了更高分数的学生。</p></blockquote><p>我们也建立了一个线性回归模型来预测一个新的学生的测验成绩，基于以下三个因素：他们使用的是哪个小测验，之前对 Paxos 的经验，和学习算法的顺序。模型预测，对小测验的选择会产生 12.5 分的差别。这显著的高于之前的 4.9 分，因为很多学生在之前都已经有了对于 Paxos 的经验，这相当明显的帮助 Paxos，对 Raft 就没什么太大影响了。但是奇怪的是，模型预测对于先进行 Paxos 小测验的人而言，Raft的得分低了6.3分; 虽然我们不知道为什么，这似乎在统计上是有意义的。</p><p>我们同时也在测验之后调查了参与者，他们认为哪个算法更加容易实现和解释；这个的结果在图 15 上。压倒性的结果表明 Raft 算法更加容易实现和解释（41 人中的 33个）。但是，这种自己报告的结果不如参与者的成绩更加可信，并且参与者可能因为我们的 Raft 更加易于理解的假说而产生偏见。</p><p><img src="/images/raft-图15.png" alt=""></p><blockquote><p>图 15：通过一个 5 分制的问题，参与者（左边）被问哪个算法他们觉得在一个高效正确的系统里更容易实现，右边被问哪个更容易向学生解释。</p></blockquote><p>关于 Raft 用户学习有一个更加详细的讨论。</p><h3 id="9-2-正确性"><a href="#9-2-正确性" class="headerlink" title="9.2 正确性"></a>9.2 正确性</h3><p>在第 5 节，我们已经制定了正式的规范，和对一致性机制的安全性证明。这个正式规范使用 TLA+ 规范语言使图 2 中总结的信息非常清晰。它长约400行，并作为证明的主题。同时对于任何想实现 Raft 的人也是十分有用的。我们通过 TLA 证明系统非常机械的证明了日志完全特性。然而，这个证明依赖的约束前提还没有被机械证明（例如，我们还没有证明规范的类型安全）。而且，我们已经写了一个非正式的证明关于状态机安全性是完备的，并且是相当清晰的（大约 3500 个词）。</p><h3 id="9-3-性能"><a href="#9-3-性能" class="headerlink" title="9.3 性能"></a>9.3 性能</h3><p>Raft 和其他一致性算法例如 Paxos 有着差不多的性能。在性能方面，最重要的关注点是，当领导人被选举成功时，什么时候复制新的日志条目。Raft 通过很少数量的消息包（一轮从领导人到集群大多数机器的消息）就达成了这个目的。同时，进一步提升 Raft 的性能也是可行的。例如，很容易通过支持批量操作和管道操作来提高吞吐量和降低延迟。对于其他一致性算法已经提出过很多性能优化方案；其中有很多也可以应用到 Raft 中来，但是我们暂时把这个问题放到未来的工作中去。</p><p>我们使用我们自己的 Raft 实现来衡量 Raft 领导人选举的性能并且回答两个问题。首先，领导人选举的过程收敛是否快速？第二，在领导人宕机之后，最小的系统宕机时间是多久？</p><p><img src="/images/raft-图16.png" alt=""></p><blockquote><p>图 16：发现并替换一个已经崩溃的领导人的时间。上面的图考察了在选举超时时间上的随机化程度，下面的图考察了最小选举超时时间。每条线代表了 1000 次实验（除了 150-150 毫秒只试了 100 次），和相应的确定的选举超时时间。例如，150-155 毫秒意思是，选举超时时间从这个区间范围内随机选择并确定下来。这个实验在一个拥有 5 个节点的集群上进行，其广播时延大约是 15 毫秒。对于 9 个节点的集群，结果也差不多。</p></blockquote><p>为了衡量领导人选举，我们反复的使一个拥有五个节点的服务器集群的领导人宕机，并计算需要多久才能发现领导人已经宕机并选出一个新的领导人（见图 16）。为了构建一个最坏的场景，在每一的尝试里，服务器都有不同长度的日志，意味着有些候选人是没有成为领导人的资格的。另外，为了促成选票瓜分的情况，我们的测试脚本在终止领导人之前同步的发送了一次心跳广播（这大约和领导人在崩溃前复制一个新的日志给其他机器很像）。领导人均匀的随机的在心跳间隔里宕机，也就是最小选举超时时间的一半。因此，最小宕机时间大约就是最小选举超时时间的一半。</p><p>图 16 中上面的图表明，只需要在选举超时时间上使用很少的随机化就可以大大避免选票被瓜分的情况。在没有随机化的情况下，在我们的测试里，选举过程往往都需要花费超过 10 秒钟由于太多的选票瓜分的情况。仅仅增加 5 毫秒的随机化时间，就大大的改善了选举过程，现在平均的宕机时间只有 287 毫秒。增加更多的随机化时间可以大大改善最坏情况：通过增加 50 毫秒的随机化时间，最坏的完成情况（1000 次尝试）只要 513 毫秒。</p><p>图 16 中下面的图显示，通过减少选举超时时间可以减少系统的宕机时间。在选举超时时间为 12-24 毫秒的情况下，只需要平均 35 毫秒就可以选举出新的领导人（最长的一次花费了 152 毫秒）。然而，进一步降低选举超时时间的话就会违反 Raft 的时间不等式需求：在选举新领导人之前，领导人就很难发送完心跳包。这会导致没有意义的领导人改变并降低了系统整体的可用性。我们建议使用更为保守的选举超时时间，比如 150-300 毫秒；这样的时间不大可能导致没有意义的领导人改变，而且依然提供不错的可用性。</p><h2 id="10-相关工作"><a href="#10-相关工作" class="headerlink" title="10 相关工作"></a>10 相关工作</h2><p>已经有很多关于一致性算法的工作被发表出来，其中很多都可以归到下面的类别中：</p><ul><li>Lamport 关于 Paxos 的原始描述，和尝试描述的更清晰。</li><li>关于 Paxos 的更详尽的描述，补充遗漏的细节并修改算法，使得可以提供更加容易的实现基础。</li><li>实现一致性算法的系统，例如 Chubby，ZooKeeper 和 Spanner。对于 Chubby 和 Spanner 的算法并没有公开发表其技术细节，尽管他们都声称是基于 Paxos 的。ZooKeeper 的算法细节已经发表，但是和 Paxos 着实有着很大的差别。</li><li>Paxos 可以应用的性能优化。</li><li>Oki 和 Liskov 的 Viewstamped Replication（VR），一种和 Paxos 差不多的替代算法。原始的算法描述和分布式传输协议耦合在了一起，但是核心的一致性算法在最近的更新里被分离了出来。VR 使用了一种基于领导人的方法，和 Raft 有很多相似之处。</li></ul><p>Raft 和 Paxos 最大的不同之处就在于 Raft 的强领导特性：Raft 使用领导人选举作为一致性协议里必不可少的部分，并且将尽可能多的功能集中到了领导人身上。这样就可以使得算法更加容易理解。例如，在 Paxos 中，领导人选举和基本的一致性协议是正交的：领导人选举仅仅是性能优化的手段，而且不是一致性所必须要求的。但是，这样就增加了多余的机制：Paxos 同时包含了针对基本一致性要求的两阶段提交协议和针对领导人选举的独立的机制。相比较而言，Raft 就直接将领导人选举纳入到一致性算法中，并作为两阶段一致性的第一步。这样就减少了很多机制。</p><p>像 Raft 一样，VR 和 ZooKeeper 也是基于领导人的，因此他们也拥有一些 Raft 的优点。但是，Raft 比 VR 和 ZooKeeper 拥有更少的机制因为 Raft 尽可能的减少了非领导人的功能。例如，Raft 中日志条目都遵循着从领导人发送给其他人这一个方向：附加条目 RPC 是向外发送的。在 VR 中，日志条目的流动是双向的（领导人可以在选举过程中接收日志）；这就导致了额外的机制和复杂性。根据 ZooKeeper 公开的资料看，它的日志条目也是双向传输的，但是它的实现更像 Raft。</p><p>和上述我们提及的其他基于一致性的日志复制算法中，Raft 的消息类型更少。例如，我们数了一下 VR 和 ZooKeeper 使用的用来基本一致性需要和成员改变的消息数（排除了日志压缩和客户端交互，因为这些都比较独立且和算法关系不大）。VR 和 ZooKeeper 都分别定义了 10 中不同的消息类型，相对的，Raft 只有 4 中消息类型（两种 RPC 请求和对应的响应）。Raft 的消息都稍微比其他算法的要信息量大，但是都很简单。另外，VR 和 ZooKeeper 都在领导人改变时传输了整个日志；所以为了能够实践中使用，额外的消息类型就很必要了。</p><p>Raft 的强领导人模型简化了整个算法，但是同时也排斥了一些性能优化的方法。例如，平等主义 Paxos （EPaxos）在某些没有领导人的情况下可以达到很高的性能。平等主义 Paxos 充分发挥了在状态机指令中的交换性。任何服务器都可以在一轮通信下就提交指令，除非其他指令同时被提出了。然而，如果指令都是并发的被提出，并且互相之间不通信沟通，那么 EPaxos 就需要额外的一轮通信。因为任何服务器都可以提交指令，所以 EPaxos 在服务器之间的负载均衡做的很好，并且很容易在 WAN 网络环境下获得很低的延迟。但是，他在 Paxos 上增加了非常明显的复杂性。</p><p>一些集群成员变换的方法已经被提出或者在其他的工作中被实现，包括 Lamport 的原始的讨论，VR 和 SMART。我们选择使用共同一致的方法因为他对一致性协议的其他部分影响很小，这样我们只需要很少的一些机制就可以实现成员变换。Lamport 的基于 α 的方法之所以没有被 Raft 选择是因为它假设在没有领导人的情况下也可以达到一致性。和 VR 和 SMART 相比较，Raft 的重新配置算法可以在不限制正常请求处理的情况下进行；相比较的，VR 需要停止所有的处理过程，SMART 引入了一个和 α 类似的方法，限制了请求处理的数量。Raft 的方法同时也需要更少的额外机制来实现，和 VR、SMART 比较而言。</p><h2 id="11-结论"><a href="#11-结论" class="headerlink" title="11 结论"></a>11 结论</h2><p>算法的设计通常会把正确性，效率或者简洁作为主要的目标。尽管这些都是很有意义的目标，但是我们相信，可理解性也是一样的重要。在开发者把算法应用到实际的系统中之前，这些目标没有一个会被实现，这些都会必然的偏离发表时的形式。除非开发人员对这个算法有着很深的理解并且有着直观的感觉，否则将会对他们而言很难在实现的时候保持原有期望的特性。</p><p>在这篇论文中，我们尝试解决分布式一致性问题，但是一个广为接受但是十分令人费解的算法 Paxos 已经困扰了无数学生和开发者很多年了。我们创造了一种新的算法 Raft，显而易见的比 Paxos 要容易理解。我们同时也相信，Raft 也可以为实际的实现提供坚实的基础。把可理解性作为设计的目标改变了我们设计 Raft 的方式；随着设计的进展，我们发现自己重复使用了一些技术，比如分解问题和简化状态空间。这些技术不仅提升了 Raft 的可理解性，同时也使我们坚信其正确性。</p><h2 id="12-感谢"><a href="#12-感谢" class="headerlink" title="12 感谢"></a>12 感谢</h2><p>这项研究必须感谢以下人员的支持：Ali Ghodsi，David Mazie`res，和伯克利 CS 294-91 课程、斯坦福 CS 240 课程的学生。Scott Klemmer 帮我们设计了用户调查，Nelson Ray 建议我们进行统计学的分析。在用户调查时使用的关于 Paxos 的幻灯片很大一部分是从 Lorenzo Alvisi 的幻灯片上借鉴过来的。特别的，非常感谢 DavidMazieres 和 Ezra Hoch，他们找到了 Raft 中一些难以发现的漏洞。许多人提供了关于这篇论文十分有用的反馈和用户调查材料，包括 Ed Bugnion，Michael Chan，Hugues Evrard，Daniel Giffin，Arjun Gopalan，Jon Howell，Vimalkumar Jeyakumar，Ankita Kejriwal，Aleksandar Kracun，Amit Levy，Joel Martin，Satoshi Matsushita，Oleg Pesok，David Ramos，Robbert van Renesse，Mendel Rosenblum，Nicolas Schiper，Deian Stefan，Andrew Stone，Ryan Stutsman，David Terei，Stephen Yang，Matei Zaharia 以及 24 位匿名的会议审查人员（可能有重复），并且特别感谢我们的领导人 Eddie Kohler。Werner Vogels 发了一条早期草稿链接的推特，给 Raft 带来了极大的关注。我们的工作由 Gigascale 系统研究中心和 Multiscale 系统研究中心给予支持，这两个研究中心由关注中心研究程序资金支持，一个是半导体研究公司的程序，由 STARnet 支持，一个半导体研究公司的程序由 MARCO 和 DARPA 支持，在国家科学基金会的 0963859 号批准，并且获得了来自 Facebook，Google，Mellanox，NEC，NetApp，SAP 和 Samsung 的支持。Diego Ongaro 由 Junglee 公司，斯坦福的毕业团体支持。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://raft.github.io/raft.pdf" target="_blank" rel="noopener">raft paper</a><br><a href="https://raft.github.io/" target="_blank" rel="noopener">raft.github.io</a><br><a href="https://github.com/etcd-io/etcd/tree/master/raft" target="_blank" rel="noopener">etcd raft</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Raft一致性算法论文(in search of an understandable consensus algorithm)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://xiongyingqi.com/categories/algorithm/"/>
    
      <category term="distributed" scheme="http://xiongyingqi.com/categories/algorithm/distributed/"/>
    
    
      <category term="raft" scheme="http://xiongyingqi.com/tags/raft/"/>
    
      <category term="consensus" scheme="http://xiongyingqi.com/tags/consensus/"/>
    
      <category term="algorithm" scheme="http://xiongyingqi.com/tags/algorithm/"/>
    
      <category term="translate" scheme="http://xiongyingqi.com/tags/translate/"/>
    
  </entry>
  
  <entry>
    <title>星客云盘</title>
    <link href="http://xiongyingqi.com/2019/03/11/x-sync/"/>
    <id>http://xiongyingqi.com/2019/03/11/x-sync/</id>
    <published>2019-03-11T15:16:00.000Z</published>
    <updated>2019-03-11T15:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SyncCloud-星客云盘"><a href="#SyncCloud-星客云盘" class="headerlink" title="SyncCloud 星客云盘"></a>SyncCloud 星客云盘</h1><blockquote><p>打造一个开源、简单、分布式的云盘。</p></blockquote><p><img src="/images/pasted-10.png" alt=""></p><a id="more"></a> <img src="http://www.plantuml.com/plantuml/svg/uyhBJqbLA4Wsv88oZBYu2XAJinFJKnMA4jDA5Agv5800B5bMK6o8mZD2y9HSKu0wKbBBCfDJYvKK4eiLKX6IHVcb9Qb5NBLSN20Z56pqzEp0sgt0Ld2f8qHJeK8WMOW8H2-cIXHnX7AO0UeGULH1e3SLT7LXUe5S8sGk0000">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SyncCloud-星客云盘&quot;&gt;&lt;a href=&quot;#SyncCloud-星客云盘&quot; class=&quot;headerlink&quot; title=&quot;SyncCloud 星客云盘&quot;&gt;&lt;/a&gt;SyncCloud 星客云盘&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;打造一个开源、简单、分布式的云盘。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cloud" scheme="http://xiongyingqi.com/categories/cloud/"/>
    
    
      <category term="sync" scheme="http://xiongyingqi.com/tags/sync/"/>
    
      <category term="pan" scheme="http://xiongyingqi.com/tags/pan/"/>
    
      <category term="edge" scheme="http://xiongyingqi.com/tags/edge/"/>
    
      <category term="devices" scheme="http://xiongyingqi.com/tags/devices/"/>
    
  </entry>
  
  <entry>
    <title>运维笔记：一次kubernetes内偶发超时的问题</title>
    <link href="http://xiongyingqi.com/2019/03/09/kubernetes-go-timeout/"/>
    <id>http://xiongyingqi.com/2019/03/09/kubernetes-go-timeout/</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-03-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-5.png" alt=""></p><blockquote><p>一次kubernetes内的pod（go程序）连接外网域名偶发超时问题。<br><a id="more"></a></p></blockquote><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近线上有个机房突然出现超时预警，原因是零星的报微信、支付宝连接超时。刚开始以为是机房的网络故障，就没有深究。</p><p>过去一天，现象还是继续。没办法，大概率不是机房问题，需要深入解决。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>先看了下日志，是go报<code>net/http: request canceled (Client.Timeout exceeded while awaiting headers)&quot;</code>错误，证明是连接阶段超时，而不是等待响应阶段超时，错误应当是在建立连接阶段时出现的。于是，可以缩小问题范围：</p><ol><li>可能是解析dns超时</li><li>可能是连接某个ip超时</li></ol><p>直接修改go代码来看定位是哪个问题比较麻烦，于是直接使用curl来确认问题。首先创建一个带<code>curl</code>功能的busybox pod:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --rm -it busybox --image sequenceiq/busybox --restart=Never</span><br></pre></td></tr></table></figure><p></p><p>然后执行curl调试:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tee curl-format.txt &lt;&lt;- <span class="string">'EOF'</span></span><br><span class="line">time_namelookup: %&#123;time_namelookup&#125;\n</span><br><span class="line">time_connect: %&#123;time_connect&#125;\n</span><br><span class="line">time_appconnect: %&#123;time_appconnect&#125;\n</span><br><span class="line">time_redirect: %&#123;time_redirect&#125;\n</span><br><span class="line">time_pretransfer: %&#123;time_pretransfer&#125;\n</span><br><span class="line">time_starttransfer: %&#123;time_starttransfer&#125;\n</span><br><span class="line">----------\n</span><br><span class="line">time_total: %&#123;time_total&#125;\n\n</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">DOMAIN=<span class="string">"api2.mch.weixin.qq.com"</span></span><br><span class="line">curl -w <span class="string">'@curl-format.txt'</span> <span class="variable">$DOMAIN</span></span><br></pre></td></tr></table></figure><p></p><p>发现curl也会偶尔连接超时<br><img src="/images/pasted-1.png" alt=""></p><p>于是可以确认是dns解析的问题，给应用pod配上host之后问题也得到改善。</p><p>我们的k8s集群是使用的kube-dns作为dns解析，于是看下<a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">CoreDNS</a>的日志：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system logs -l k8s-app=kube-dns</span><br></pre></td></tr></table></figure><p></p><p>存在有比较多的异常，都是连接相同一个IP：<code>xx.xx.xx.6</code>连接超时<br><img src="/images/pasted-3.png" alt=""><br>咨询过运维之后发现，该IP：<code>xx.xx.xx.6</code>是一个错误配置，该IP实际是不存在的。</p><h1 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h1><p>待运维修改CoreDNS的configmap之后，问题得到解决。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>go是没有dns缓存的，比较依赖主机/环境的dns解析缓存。如果要做到可靠的话建议自己加缓存。</li><li>kubernetes基础组件的配置变更要细致，且做好监控。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/golang/go/issues/16094" target="_blank" rel="noopener">go-http-issues</a></li><li><a href="https://github.com/golang/go/issues/24796" target="_blank" rel="noopener">proposal-go-dns-cache</a></li><li><a href="https://stackoverflow.com/questions/40251727/does-go-cache-dns-lookups" target="_blank" rel="noopener">go-dns-cache</a></li><li><a href="https://github.com/mercari/go-dnscache" target="_blank" rel="noopener">go-dnscache</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">CoreDNS</a></li><li><a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">kube-dns</a></li><li><a href="http://cizixs.com/2017/04/11/use-curl-to-analyze-request/" target="_blank" rel="noopener">use-curl-to-analyze-request</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pasted-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;一次kubernetes内的pod（go程序）连接外网域名偶发超时问题。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://xiongyingqi.com/categories/kubernetes/"/>
    
      <category term="运维笔记" scheme="http://xiongyingqi.com/categories/kubernetes/%E8%BF%90%E7%BB%B4%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="curl" scheme="http://xiongyingqi.com/tags/curl/"/>
    
      <category term="timeout" scheme="http://xiongyingqi.com/tags/timeout/"/>
    
      <category term="go" scheme="http://xiongyingqi.com/tags/go/"/>
    
      <category term="kubernetes" scheme="http://xiongyingqi.com/tags/kubernetes/"/>
    
      <category term="dns" scheme="http://xiongyingqi.com/tags/dns/"/>
    
      <category term="kube-dns" scheme="http://xiongyingqi.com/tags/kube-dns/"/>
    
      <category term="coredns" scheme="http://xiongyingqi.com/tags/coredns/"/>
    
      <category term="httpclient" scheme="http://xiongyingqi.com/tags/httpclient/"/>
    
      <category term="awaiting headers" scheme="http://xiongyingqi.com/tags/awaiting-headers/"/>
    
  </entry>
  
  <entry>
    <title>curl网络耗时调试</title>
    <link href="http://xiongyingqi.com/2019/03/05/curl-debug/"/>
    <id>http://xiongyingqi.com/2019/03/05/curl-debug/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-03-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线上环境各种蛋疼问题，通过日志无法定位出是我们服务器的问题（服务器问题又包括：dns服务器问题、内部网络问题等）还是第三方服务器的问题，通过一个简单的脚本即可直观调试出来。</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tee curl-format.txt &lt;&lt;- <span class="string">'EOF'</span></span><br><span class="line">time_namelookup: %&#123;time_namelookup&#125;\n</span><br><span class="line">time_connect: %&#123;time_connect&#125;\n</span><br><span class="line">time_appconnect: %&#123;time_appconnect&#125;\n</span><br><span class="line">time_redirect: %&#123;time_redirect&#125;\n</span><br><span class="line">time_pretransfer: %&#123;time_pretransfer&#125;\n</span><br><span class="line">time_starttransfer: %&#123;time_starttransfer&#125;\n</span><br><span class="line">----------\n</span><br><span class="line">time_total: %&#123;time_total&#125;\n\n</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">DOMAIN=<span class="string">"api2.mch.weixin.qq.com"</span></span><br><span class="line">curl -w <span class="string">'@curl-format.txt'</span> <span class="variable">$DOMAIN</span></span><br></pre></td></tr></table></figure><p>释义：</p><ul><li>time_namelookup：DNS 域名解析的时候，就是把 <a href="https://zhihu.com" target="_blank" rel="noopener">https://zhihu.com</a> 转换成 ip 地址的过程</li><li>time_connect：TCP 连接建立的时间，就是三次握手的时间</li><li>time_appconnect：SSL/SSH 等上层协议建立连接的时间，比如 connect/handshake 的时间</li><li>time_redirect：从开始到最后一个请求事务的时间</li><li>time_pretransfer：从请求开始到响应开始传输的时间</li><li>time_starttransfer：从请求开始到第一个字节将要传输的时间</li><li>time_total：这次请求花费的全部时间</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;线上环境各种蛋疼问题，通过日志无法定位出是我们服务器的问题（服务器问题又包括：dns服务器问题、内部网络问题等）还是第三方服务器的问题，通过一个简单的脚本即可直观调试出来。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux" scheme="http://xiongyingqi.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://xiongyingqi.com/tags/linux/"/>
    
      <category term="curl" scheme="http://xiongyingqi.com/tags/curl/"/>
    
      <category term="debug" scheme="http://xiongyingqi.com/tags/debug/"/>
    
      <category term="timeout" scheme="http://xiongyingqi.com/tags/timeout/"/>
    
      <category term="pay" scheme="http://xiongyingqi.com/tags/pay/"/>
    
      <category term="time" scheme="http://xiongyingqi.com/tags/time/"/>
    
      <category term="-w" scheme="http://xiongyingqi.com/tags/w/"/>
    
  </entry>
  
  <entry>
    <title>Einstein&#39;s Law of Motion</title>
    <link href="http://xiongyingqi.com/2019/02/23/einstein-law-of-motion/"/>
    <id>http://xiongyingqi.com/2019/02/23/einstein-law-of-motion/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>$$\mathbf F = \dfrac {m_0 \mathbf a} {\left({1 - \dfrac{v^2}{c^2}}\right)^{\tfrac 3 2}}$$</p></blockquote><a id="more"></a><h1 id="Physical-Law"><a href="#Physical-Law" class="headerlink" title="Physical Law"></a>Physical Law</h1><p>The force and acceleration on a body of constant rest mass are related by the equation:<br>$$<br>\mathbf F = \dfrac {m_0 \mathbf a} {\left({1 - \dfrac{v^2}{c^2}}\right)^{\tfrac 3 2}}<br>$$<br>where:</p><ul><li>𝐅 is the force on the body</li><li>𝐚 is the acceleration induced on the body</li><li>𝑣 is the magnitude of the velocity of the body</li><li>𝑐 is the speed of light</li><li>𝑚<sub>0</sub> is the rest mass of the body.</li></ul><h1 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h1><p>Into Newton’s Second Law of Motion:<br>$$<br>\mathbf F = \dfrac {\mathrm d}{\mathrm d t} \left({m \mathbf v}\right)<br>$$</p><p>we substitute Einstein’s Mass-Velocity Equation:<br>$$<br>m = \dfrac {m_0} {\sqrt {1 - \dfrac {v^2} {c^2}}}<br>$$<br>where:</p><ul><li>𝑣 is the magnitude of the velocity of the body</li><li>𝑐 is the speed of light in vacuum</li><li>𝑚<sub>0</sub> is the rest mass of the body.</li></ul><p>The value 𝑚 is known as the relativistic mass of the body.<br>The factor $\dfrac 1 {\sqrt{1 - \dfrac {v^2} {c^2} } }$ is known as the Lorentz Factor.</p><p>to obtain:<br>$$<br>\mathbf F = \dfrac {\mathrm d} {\mathrm d t} \left({\dfrac {m_0 \mathbf v}{\sqrt{1 - \dfrac {v^2}{c^2}}}}\right)<br>$$</p><p>Then we perform the differentiation with respect to time:</p><p>$$\frac{\mathrm d}{\mathrm d t} \left({\frac {\mathbf v}{\sqrt{1 - \dfrac {v^2}{c^2} } } }\right)$$ $$ = \frac{\mathrm d}{\mathrm d v} \left({\frac {\mathbf v}{\sqrt{1 - \dfrac {v^2}{c^2} } } }\right) \frac{\mathrm d v}{\mathrm d t} $$<br>$$ = \mathbf a \left({\frac {\sqrt{1 - \dfrac {v^2}{c^2} } - \dfrac v 2 \dfrac 1 {\sqrt{1 - \dfrac {v^2}{c^2} } } \dfrac{-2 v}{c^2} } {1 - \dfrac {v^2}{c^2} } }\right) $$<br>$$ = \mathbf a \left({\frac {c^2 \left({1 - \dfrac {v^2}{c^2} }\right) + v^2} {c^2 \left({1 - \dfrac {v^2}{c^2} }\right)^{3/2} } }\right) $$<br>$$ = \mathbf a \left({\frac 1 {\left({1 - \dfrac {v^2}{c^2} }\right)^{3/2} } }\right)$$</p><p>Thus we arrive at the form:<br>$$<br>\mathbf F = \dfrac {m_0 \mathbf a} {\left({1 - \dfrac{v^2}{c^2}}\right)^{\tfrac 3 2}}<br>$$</p><h1 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h1><ul><li>1992: <a href="https://proofwiki.org/wiki/Mathematician:George_F._Simmons" target="_blank" rel="noopener">George F. Simmons</a>: <a href="https://proofwiki.org/wiki/Book:George_F._Simmons/Calculus_Gems" target="_blank" rel="noopener">Calculus Gems</a> … (<a href="https://proofwiki.org/wiki/Definition:Linear_Momentum" target="_blank" rel="noopener">previous</a>) … (<a href="https://proofwiki.org/wiki/Einstein%27s_Law_of_Motion" target="_blank" rel="noopener">next</a>): Chapter B.7: A Simple Approach to $E = M c^2$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;$$\mathbf F = \dfrac {m_0 \mathbf a} {\left({1 - \dfrac{v^2}{c^2}}\right)^{\tfrac 3 2}}$$&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="physical" scheme="http://xiongyingqi.com/categories/physical/"/>
    
    
      <category term="physical" scheme="http://xiongyingqi.com/tags/physical/"/>
    
      <category term="law of motion" scheme="http://xiongyingqi.com/tags/law-of-motion/"/>
    
      <category term="law" scheme="http://xiongyingqi.com/tags/law/"/>
    
      <category term="montion" scheme="http://xiongyingqi.com/tags/montion/"/>
    
      <category term="einstein" scheme="http://xiongyingqi.com/tags/einstein/"/>
    
  </entry>
  
  <entry>
    <title>Einstein&#39;s Mass-Energy Equation</title>
    <link href="http://xiongyingqi.com/2019/02/23/einstein-mass-energy-equation/"/>
    <id>http://xiongyingqi.com/2019/02/23/einstein-mass-energy-equation/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-4.png" alt=""></p><blockquote><p>$$e=mc^2$$</p></blockquote><a id="more"></a><h1 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h1><p>The energy imparted to a body to cause that body to move causes the body to increase in mass by a value 𝑀 as given by the equation:<br>$$<br>E = M c^2<br>$$<br>where 𝑐 is the speed of light.</p><h1 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h1><p>From <a href="/2019/02/24/einstein-law-of-motion/">Einstein’s Law of Motion</a>, we have:<br>$$<br>\mathbf F = \dfrac {m_0 \mathbf a} {\left({1 - \dfrac {v^2} {c^2}}\right)^{\tfrac 3 2}}<br>$$<br>where:</p><ul><li>𝐅 is the force on the body</li><li>𝐚 is the acceleration induced on the body</li><li>𝑣 is the magnitude of the velocity of the body</li><li>𝑐 is the speed of light</li><li>𝑚<sub>0</sub> is the rest mass of the body.<br>Without loss of generality, assume that the body is starting from rest at the origin of a cartesian coordinate plane.</li></ul><p>Assume the force 𝐅 on the body is in the positive direction along the x-axis.</p><p>To simplify the work, we consider the acceleration as a scalar quantity and write it 𝑎.</p><p>Thus, from the Chain Rule:<br>$$<br>a = \dfrac{\mathrm d v}{\mathrm d t} = \dfrac{\mathrm d v}{\mathrm d x} \dfrac {\mathrm d x}{\mathrm d t} = v \dfrac {\mathrm d v} {\mathrm d x}<br>$$</p><p>Then from the definition of energy:<br>$$<br>\displaystyle E = \int_0^x F \mathrm d x<br>$$<br>which leads us to:<br>$$E = m_0 \int_0^x \frac a {\left({1 - v^2 / c^2}\right)^{\tfrac 3 2} } \ \mathrm d x $$<br>$$ = m_0 \int_0^v \frac v {\left({1 - v^2 / c^2}\right)^{\tfrac 3 2} } \ \mathrm d v $$<br>$$ = m_0 \left({- \frac {c^2} 2}\right) \int_0^v \left({1 - \frac {v^2} {c^2} }\right)^{-\tfrac 3 2} \left({- \frac {2 v \ \mathrm d v} {c^2} }\right) $$<br>$$ = \left[{m_0 c^2 \left({1 - \frac {v^2} {c^2} }\right)^{- \tfrac 1 2} }\right]_0^v $$<br>$$ = m_0 c^2 \left({\frac 1 {\sqrt {1 - \frac {v^2} {c^2} } } - 1}\right) $$<br>$$ = c^2 \left({\frac {m_0} {\sqrt {1 - \frac {v^2} {c^2} } } - m_0}\right) $$<br>$$ = c^2 \left({m - m_0}\right) $$<br>$$ = M c^2$$</p><blockquote><p><a href="/2019/02/24/einstein-mass-velocity-equation/">Einstein’s Mass-Velocity Equation</a></p></blockquote><h1 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h1><ul><li>1972: <a href="https://proofwiki.org/wiki/Mathematician:George_F._Simmons" target="_blank" rel="noopener">George F. Simmons</a>: <a href="https://proofwiki.org/wiki/Book:George_F._Simmons/Differential_Equations" target="_blank" rel="noopener">Differential Equations</a> … (<a href="https://proofwiki.org/wiki/Definition:Burnout_Height" target="_blank" rel="noopener">previous</a>) … (<a href="https://proofwiki.org/wiki/Einstein%27s_Mass-Energy_Equation" target="_blank" rel="noopener">next</a>): Miscellaneous Problems for Chapter 2: Problem 32</li><li>1992: <a href="https://proofwiki.org/wiki/Mathematician:George_F._Simmons" target="_blank" rel="noopener">George F. Simmons</a>: <a href="https://proofwiki.org/wiki/Book:George_F._Simmons/Calculus_Gems" target="_blank" rel="noopener">Calculus Gems</a> … (<a href="https://proofwiki.org/wiki/Definition:Linear_Momentum" target="_blank" rel="noopener">previous</a>) … (<a href="https://proofwiki.org/wiki/Einstein%27s_Law_of_Motion" target="_blank" rel="noopener">next</a>): Chapter B.7: A Simple Approach to $E = M c^2$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pasted-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;$$e=mc^2$$&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="physical" scheme="http://xiongyingqi.com/categories/physical/"/>
    
    
      <category term="physical" scheme="http://xiongyingqi.com/tags/physical/"/>
    
      <category term="einstein" scheme="http://xiongyingqi.com/tags/einstein/"/>
    
      <category term="energy equation" scheme="http://xiongyingqi.com/tags/energy-equation/"/>
    
      <category term="energy" scheme="http://xiongyingqi.com/tags/energy/"/>
    
      <category term="equation" scheme="http://xiongyingqi.com/tags/equation/"/>
    
  </entry>
  
  <entry>
    <title>Einstein&#39;s Mass-Velocity Equation</title>
    <link href="http://xiongyingqi.com/2019/02/23/einstein-mass-velocity-equation/"/>
    <id>http://xiongyingqi.com/2019/02/23/einstein-mass-velocity-equation/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>$$m = \dfrac {m_0} {\sqrt{1 - \dfrac {v^2} {c^2} } }$$<br><a id="more"></a></p></blockquote><h1 id="Physical-Law"><a href="#Physical-Law" class="headerlink" title="Physical Law"></a>Physical Law</h1><p>The mass 𝑚 of a body is not constant.</p><p>It varies with the body’s velocity, according to the equation:</p><p>$$<br>m = \dfrac {m_0} {\sqrt{1 - \dfrac {v^2} {c^2} } }<br>$$</p><p>where:</p><ul><li>𝑣 is the magnitude of the velocity of the body</li><li>𝑐 is the speed of light in vacuum</li><li>𝑚<sub>0</sub> is the rest mass of the body.</li></ul><p>The value 𝑚 is known as the relativistic mass of the body.</p><p>The factor $\dfrac 1 {\sqrt{1 - \dfrac {v^2} {c^2} } }$ is known as the Lorentz Factor.</p><h1 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h1><p>Imagine a comet that flies towards a planet on which you are resting.</p><p>The comet’s velocity 𝑢 towards the planet is much smaller than the speed of light.</p><p>Now imagine the impact caused by the comet striking the planet as a deformation of the planet.</p><p>That impact can be seen as proportional to the momentum of the comet which is:<br>$$<br>𝑝=𝑚𝑢<br>$$<br>where:</p><ul><li>𝑝 is the magnitude of the comet’s momentum</li><li>𝑚 is the comet’s rest mass</li><li>𝑢 is the magnitude of the comet’s velocity.</li></ul><p>f someone else watches the crash from a space ship passing by with a relativistic velocity (for example 𝑣=0.7𝑐) he will find that the comet appears to move more slowly than it does from your stationary perspective on the planet.</p><p>This is due to the time dilation, which is given by:<br>$$<br>\Delta t’ = \dfrac {\Delta t} {\sqrt{1 - \dfrac {v^2} {c^2}}}<br>$$</p><p>where:</p><ul><li>Δ𝑡′ is the time interval measured from the space ship</li><li>Δ𝑡 is the time interval measured in the inertial system containing planet and comet</li><li>𝑣 is the magnitude of the space ship’s velocity</li><li>𝑐 is the speed of light in vacuum.<br>Because the time measured in the space ship is less, the comet will appear to need more time to cover a certain distance.</li></ul><p>Thus, its velocity seems smaller from the perspective of the space ship (Note: The space ship’s trajectory be perpendicular to the comet’s trajectory towards the planet, so there is no length contraction parallel to the trajectory of the comet).</p><p>The comet’s velocity measured from the planet is:<br>$$<br>u = \dfrac {\mathrm d s} {\mathrm d t}<br>$$<br>where the comet’s velocity measured from the space ship is:<br>$$<br>u’ = \dfrac {\mathrm d s} {\mathrm d t’}<br>$$<br>and as we know from the time dilation, the term for 𝑢′ is thus:<br>$$<br>u’ = u \sqrt{1 - \frac {v^2}{c^2}}<br>$$<br>The observer in the space ship will nevertheless find out that the impact is equal to the one observed by the resting person.</p><p>That means that the comet’s momentum doesn’t change, no matter from what inertial system you measure it.</p><p>That can only be possible, if – seen from the space ship – the comet’s mass increases, as its velocity decreases.</p><p>The comet’s momentum from the perspective of the space ship is:<br>$$<br>p’ = m’ u’<br>$$<br>where:</p><ul><li>𝑝′ is the magnitude of the comet’s momentum measured from the inertial system of the space ship</li><li>𝑚′ is the comet’s relativistic mass measured from the inertial system of the space ship</li><li>𝑢′ is the magnitude of the comet’s velocity measured from the inertial system of the space ship.<br>And because the measured momentums from both observers are the same, you can write:<br>$$<br>p = p’<br>$$</li></ul><p>$$<br>m u = m’ u’<br>$$</p><p>$$<br>m’ = m \dfrac u {u’}<br>$$</p><p>$$<br>m’ = m \dfrac u {u \sqrt{1 - \frac {v^2} {c^2}}}<br>$$</p><p>$$<br>m’ = \dfrac m {\sqrt{1 - \frac {v^2} {c^2}}}<br>$$</p><h1 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h1><ul><li>1972: <a href="https://proofwiki.org/wiki/Mathematician:George_F._Simmons" target="_blank" rel="noopener">George F. Simmons</a>: <a href="https://proofwiki.org/wiki/Book:George_F._Simmons/Differential_Equations" target="_blank" rel="noopener">Differential Equations</a> … (<a href="https://proofwiki.org/wiki/Definition:Burnout_Height" target="_blank" rel="noopener">previous</a>) … (<a href="https://proofwiki.org/wiki/Einstein%27s_Mass-Energy_Equation" target="_blank" rel="noopener">next</a>): Miscellaneous Problems for Chapter 2: Problem 32</li><li>1992: <a href="https://proofwiki.org/wiki/Mathematician:George_F._Simmons" target="_blank" rel="noopener">George F. Simmons</a>: <a href="https://proofwiki.org/wiki/Book:George_F._Simmons/Calculus_Gems" target="_blank" rel="noopener">Calculus Gems</a> … (<a href="https://proofwiki.org/wiki/Definition:Linear_Momentum" target="_blank" rel="noopener">previous</a>) … (<a href="https://proofwiki.org/wiki/Einstein%27s_Law_of_Motion" target="_blank" rel="noopener">next</a>): Chapter B.7: A Simple Approach to $E = M c^2$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;$$m = \dfrac {m_0} {\sqrt{1 - \dfrac {v^2} {c^2} } }$$&lt;br&gt;
    
    </summary>
    
      <category term="physical" scheme="http://xiongyingqi.com/categories/physical/"/>
    
    
      <category term="physical" scheme="http://xiongyingqi.com/tags/physical/"/>
    
      <category term="einstein" scheme="http://xiongyingqi.com/tags/einstein/"/>
    
      <category term="equation" scheme="http://xiongyingqi.com/tags/equation/"/>
    
      <category term="mass-velocity equation" scheme="http://xiongyingqi.com/tags/mass-velocity-equation/"/>
    
      <category term="mass" scheme="http://xiongyingqi.com/tags/mass/"/>
    
  </entry>
  
  <entry>
    <title>next主题的一些配置</title>
    <link href="http://xiongyingqi.com/2019/02/14/next-tips/"/>
    <id>http://xiongyingqi.com/2019/02/14/next-tips/</id>
    <published>2019-02-14T07:40:00.000Z</published>
    <updated>2019-02-14T07:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用next主题过程中遇到一些问题，供大家参考。</p></blockquote><a id="more"></a><h1 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>站点内将language设置为<code>zh-Hans</code>，但是博客的语言并没有被改变为中文，原因是next主题使用<code>zh-CN.yml</code>配置跟<code>site</code>的配置不一致。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>创建一个软链即可<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $THEME_FOLDER/languages</span><br><span class="line">ln -s zh-CN.yml zh-Hans.yml</span><br></pre></td></tr></table></figure><p></p><h1 id="版权申明"><a href="#版权申明" class="headerlink" title="版权申明"></a>版权申明</h1><p>现在是需要配置<code>creative_commons</code>节点：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">by-nc-sa</span></span><br><span class="line"><span class="attr">  sidebar:</span> <span class="literal">true</span> <span class="comment"># 显示在sidebar里面，可选</span></span><br><span class="line"><span class="attr">  post:</span> <span class="literal">true</span> <span class="comment"># 显示在post底部</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;在使用next主题过程中遇到一些问题，供大家参考。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xiongyingqi.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xiongyingqi.com/tags/hexo/"/>
    
      <category term="next" scheme="http://xiongyingqi.com/tags/next/"/>
    
      <category term="theme" scheme="http://xiongyingqi.com/tags/theme/"/>
    
      <category term="tips" scheme="http://xiongyingqi.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>支付系统-架构设计</title>
    <link href="http://xiongyingqi.com/2019/02/06/pay-design-architecture/"/>
    <id>http://xiongyingqi.com/2019/02/06/pay-design-architecture/</id>
    <published>2019-02-06T06:54:04.000Z</published>
    <updated>2020-09-08T15:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-8.png" alt=""></p><blockquote><p>本文介绍核心支付系统的主要功能和组件。</p></blockquote><a id="more"></a><style>span.green{color:#54cc76}span.purple{color:#7949b3}span.yellow{color:#ffca80}</style><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a><span class="purple">目标</span></h3><ul><li><span class="green">简化逻辑</span>：边界清晰、无冗余逻辑、方便测试</li><li><span class="green">分布式</span>：容器化部署、无状态、可扩展、低耦合</li><li><span class="green">高用性</span>：机房多主、自动扩容、数据库最终一致</li></ul><h3 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a><span class="purple">拆分</span></h3><ul><li><span class="yellow">业务</span>：代金券、活动</li><li><span class="yellow">支付中心</span>：商品管理、价格管理、发货路由</li><li><span class="green">支付网关</span>：下单、支付、代扣、通知、后督（<em>订单二次确认</em>）、对账、渠道服务</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="网关体系"><a href="#网关体系" class="headerlink" title="网关体系"></a><span class="purple">网关</span>体系</h3><ul><li>支付网关：接受下单请求、校验签名、生成订单、操作DB、调用渠道服务</li><li>代扣网关：处理签约请求、代扣请求、互斥逻辑</li><li>通知网关：处理渠道通知</li></ul><h3 id="渠道服务集合"><a href="#渠道服务集合" class="headerlink" title="渠道服务集合"></a>渠道服务集合</h3><h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4><ul><li>无db操作</li><li>无订单操作</li><li>只接受请求并响应对应数据</li><li>不关心上层逻辑</li></ul><h4 id="微服务化"><a href="#微服务化" class="headerlink" title="微服务化"></a>微服务化</h4><ul><li>service:<ul><li>wechat</li><li>alipay</li><li>unionpay</li></ul></li><li>rpc:<ul><li>grpc://wechat:8080</li><li>grpc://alipay:8080</li><li><a href="http://unionpay:8080" target="_blank" rel="noopener">http://unionpay:8080</a></li></ul></li></ul><blockquote><p>渠道微服务化，可以在国际化业务中带来更便捷的差异化部署</p></blockquote><h4 id="面向协议编程"><a href="#面向协议编程" class="headerlink" title="面向协议编程"></a>面向<span class="purple">协议</span>编程</h4><ul><li>pay(用户触发扣款或签约)<ul><li>method：alipay/wechat/unionpay</li><li>from: WEB/MWEB/APP/SDK/BANK/SERVER</li><li>type: pay/sign_pay</li></ul></li><li>confirm_pay(确认支付，用户二次验证)<ul><li>from</li><li>type</li><li>method</li></ul></li><li>refund(退款)</li><li>transfer(转账)</li></ul><h4 id="扩展-amp-配置"><a href="#扩展-amp-配置" class="headerlink" title="扩展&amp;配置"></a><span class="purple">扩展</span>&amp;配置</h4><ul><li>etcd配置管理<ul><li>高可用</li><li>实时变更配置</li><li>跨地域同步</li></ul></li><li>简化配置<ul><li>使用field tag生成json</li><li>管理后台根据field json生成配置表单</li></ul></li></ul><p><img src="https://www.plantuml.com/plantuml/svg/TLBDRjD04BxlKmovD9LeVEcf1wGqYG2fIX5DXJXPQtiQhxJUDRkpk0Pnvm5u2Dw0DuBNODPnVfoaldWz-_tDZCKhPN8T2WnEGqbK-viaSRAPh1ML8GiUNMuDeQ59RgiaqxB0IYg3BgcrD1GgVUMfrNYLNoULzCGN-NNAsDgQoAeP8OIuk9j-ldzSfP_UhzwbTuktY-LS25Aa4HvQPbKmYpRF18MIQoShUB8EFiYslnRJdAmRvy6JhT2zXj6iFuxu_E_Nxxy__umkXLYmYAkTyfZUsc0AwThnAAQHfet8MN-y_2w0durukdYcSQQ-fRxxPDXjyDoZzpqWCgTQsyR3De47il1LOGFASDHAah86P6O30PMeN5S7QGgmhc3y9CRRUuvhsQOvnhXxszZlfWP-PxmgiV_gPi8vezIHqbeIDlmUIFN5WoQEjE9wOn-im2b11hAfGuDDTFWXnC5uyb8QWtflCDiK3dQqDN0eTIVPEx41OmjUTVJp5xtTRYWVMNP-iDh19XvAsq3jR15owk0HlKIrBhF1__3IE1r-2UYf9yxFZVti_EvZlYFsuzbHdqpccFfIv1CYvsNui0oJDsS2ti3IadfgXJYzsp86NUu89pSHlf_u5lSV"></p><h3 id="支付网关系统"><a href="#支付网关系统" class="headerlink" title="支付网关系统"></a>支付网关系统</h3><p><img src="https://www.plantuml.com/plantuml/svg/TLDDRzD04BtdLmova4g9VUcf1oIQG8L4eIKdLA5gl9xOAtRNpduqk8Z_pepjD6uGaYMFTzvx--R3RxHJ9fMKl84wnZPSvRd7GrRfMASY1VAgSP5Sp5HZyy9WIHQr8v-t1brCrgn2x0ojr6LkCKHEgCj7uVIeh6N4RBRjE6CVF_oAYrOjONw77IWM9J_dhu-DXq8_po-cE5MFk7MDpf49WZoGgZ7cQ7IBNPwSRXm7MPOnzqY-Rf8hqNUBK8mADnZfWDtyulSCO7sqji2Ay-zR_PBdpotv9wq8IXrKyqI-My8Q7Qk19qCOQ0btwD4IMm_0PJ8cyltmoRQ6B9SKeEX0kyfJ2FbpIeQj0RowkAr6O-DjSl4DSOPzGEDBxih5Aq8GmbPNRigGhjqof3PTVf_GioEElXFo2uA0qPLisz7XJ4w9t1gDAL3zd4f-8qNwYK0TSplVM53Z0B8p6RTZofScwjshIiQJsCXCppbDOCHNAH6sgHLIu1aAxJvnjuVg8KICQRpll7bA5CQTE5xRxyQ637ltm0l1LUyJ1Pa5nGEHWseOSUXxyh-2If7UN4-BsHJGj38OTdaoTABO_M0zzUXRdZbM17ivE5FV58jI5dA34GjU9C7RBkpDqkgoDEoED-RC44LLCanU0kV4JbSG-Zr_COCLh5RleArESPZ4gXfWxV1PXbEi90wJyp0vLvDpzU-vtL_1NGersA5cpZHXO1HNC1ccSDwEAI5jYVyQ-J_bxzbfR_lUCiZkUupRYR0n4s5-ogEsn0Mi7cfk6haVVWNIdTcVsQnLiFhC6AncQa2h-Yy0"></p><h3 id="支付调用时序图"><a href="#支付调用时序图" class="headerlink" title="支付调用时序图"></a>支付调用时序图</h3><p><img src="https://www.plantuml.com/plantuml/svg/fLDDSzem4BthLsovj3q0xKnEFdG63DXCqYQ4IQuTOM-29xBaweEK_lgkP85jwArScDrzx-tkM_b39GlXIdHQmDxQnYJJgURlazVAxjtE6TI5aXQbdHIgdku4Bx7cbKGzRGINrjLYREnHuBYucTRSM2eKDpy9soZfMGqX6FjetYhPSCrhg9LKnLwh6i5gXupnmYeDJzI94S9MHTMGC8pIFPSInGYuWUMmzC2FAOcZ_ZIl_dmEY1dRgTymMlkiv0Asg0zLWQChOiOjllDZ8CqlEd8XThnuwqDMrvtRkKmePyFo3sMhbq6B_8g_u9RlkC5GJbaPGnXzFsutTo6xODvqhGICDWuTGMTRM3EK9T2MZ7cpOFmDPWayy5Vq5bO7Qaeki9alp1D8DVhClIx9s3DWpkQn_eoQHZs76T9DEqARJnFOyiELICfINrrGTNFNfHTi4Kdtjwp4NZwDJORvD7R9ahO1FE8lXyPsYXdBF61v2SYYtYCQUcRadVUqBvr5wLc7wPVdqIRl8osnL--mqQag4UWbQYmhZOK5-YJw9F9sCfbqvY-z-KUsX345gmJQstV3hzWgRdTPYMjbvoE4S7NfJzOAa9zF3RqI_Dy3hAuF41haj8XM1Hf3knidUWV8MUuHwmGQP_PjS2MJUvbufbllH_GzslX4DbwwJSOzXbRj-sLCADKme5zFrOTTUo5EYLO_cXeuf2D32COLVf6G1fW5S1xcQZFvmD4potBhJgGK1Xpwqi-u5ru9B2FEZmnVlu2jQZnn_pqVYSYMTVeVk4V9lm00"></p><h3 id="签约"><a href="#签约" class="headerlink" title="签约"></a>签约</h3><p><img src="https://www.plantuml.com/plantuml/svg/VLJ9Rjim4BtpArYVRAIIBpdvKA1nWY8eq3Gsacj0aHE9i4IoNBpqwpka95loqei4pRmto-EZlaZ5wo0Ws9fMtXktcCyjs-Mbz5KeWWFBjVAWVCvrCozg9g1XKe6Tcvef7vewS_vGGyRlvmrp7XFy_YDo4YetY224SQyjdRnXkGbbZWPYcFMIIuCrw6HPCQMWJYbUZNFlqlh0wk_EWNVh0tPe4cxBt1ZucnsME2VOwOFyEqiOmqcXztJo7CEArNGDTYivJ2wOVIAnod5wBKirpBjpm9BLTS7uPWZYLufSmpbLNjMYmxXkZyjT7vbd1NDj5L4GK8BYigXry5g5fW1BIA3PDsGlQ6nFBVm9u3mnF8Pn3NftrwQcp9WFARxI41_6QX6uJm7MwA3yZ4GqaaIHEC_kQI-TTzE4xyb37c_Nc15aP5stB5lGbvzzALpgs7ymckjo2_e3q43C0tM8w3EykiOOD5Y1CrevQDkaMgCu5IXSaW1p8QNMbTxHrnL5YmffWNlgDSKBGKYUvvs8iUzIgqzf6q9ubGHKhO2_j9UV1n8_Jmgz1h27D3bEohKLHo7KIGWr4k8TRAnpNEW2s9L-CoAfufaFxbRPD78VIGF7THVqCIr825wVM19Vk5S5V4DXRp3N9r2WsEif1IbiyMPrftqwvTcParPuOBiM51TFYB5lRgjoPeyuGLiKhKv6DOwsG3fwl2jmue_TzH91_xTN0ywn4eOEkyAww75ZQjv71E1VJsvZ1_mFzKV0HvxXtMAzCkrAl3mEsNcYZmovhVRf00UHjaKSGMyIxMG4lVa7"></p><h3 id="数据库高可用"><a href="#数据库高可用" class="headerlink" title="数据库高可用"></a>数据库<span class="purple">高可用</span></h3><ul><li>跨DC同步：基于otter进行同步，双向同步（多机房使用星型结构）</li><li>同DC高可用：基于mycat和mgr，实现大容量、高可用db集群</li><li><span class="green">mgr</span>的心跳检测：二次开发mycat，对mgr节点状态实时检测并增删故障db</li><li>应用层：去除自增主键，按机房、机器生成无冲突、有序的流水号，防止多机房数据冲突</li></ul><p><img src="https://www.plantuml.com/plantuml/svg/hPDHQwD04CVVyodcyd86JgMc3qSeXQGvxgdSqN3qeHnbPrsgL5Tnrslaw7U_sMpMg0rUGWkIEF_vpyuu-lkKIfxLiQYh31AjIxK8mugz14-fJcgibQXu8RMGEk157cB6Of6pL8egB3CcTPrdlj9D9dn-6UPCQKhmoqTJitC59JacarLHovXLZSU-m3IDEIp1kzsvPzFPtmb0QtWsZkUl2cWgaxTfW4r3KUwL9lsJDV2TQV726fS6k74joMDCox9KK_hV6zLqjZUshNYYA7-JC2b51XjH_KcvK8SJksVovABZlHSyONhQKPIjRflqQwEESvcb9SrzSkssumo2OApmTNBujVjw_BRLNcxMSTjmcjWuJTvcr-Z5Q9BhbNlgjhFDcOUESRV6ggXBg4IPfNHGMiXzrq51T6x1_3y5PjfsOA_GPjmVsdmOTBDf98UOQRQpskiplIhm7v8qZeNylVQ1rc_bQ21lIQPl1Np_6dBcWbyKqH7zCEg7Mzig9s5DWbdK0kx3kxuM7T7cJgFBbC5LwxqxFBbDHYuv7oPTiPcSLh80J6LMFBco83WYpz_8hnqkSS_bQeWZZkE8f-289-A8v_28xm4ItqCaVW2IE8OaZY29voA9voA9voA9eqZIwxU4eGiiGtWnYAD1x2131myU83jeqH6j3nawoF08PEWWm-EGeOCCUpIXWsmWpz_811an1rTELhIVVm00"></p><h3 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h3><p><img src="https://www.plantuml.com/plantuml/svg/TPHDRzim38Rl-XNQAIVRMDVJW0Geqg67hKstPIXs2cYBRep9agSF54RH_px9-PAfDQU4ZrwIuYlcGwSQwGLw8_dUkS5-hYe3B-Lpv_Q-zXPDevL3vSf6zrKjGM0FdK9J3HAKyxqih1ib5irrrODr0JJNkt1sq2ggXd22iGN_TlDxyskxssuUTxURfuSO4jY6HAoHsWl-rTTe53gqhm7n0Pe_y8nyhGtoLyR3Hsc1_176Et3u0kCbzjsZoQC_iFLAPE6j0MLRD1bOWvHrg9g11-swDiyVEha51pLOZ0s_CPPqlGUbK5eEbZTf-qTGbkM4ZiSo_eG1kIny8xjXQc4gTkhY7bIeQNwEOVZzARun0iszLftJ9Zcx3fQWOIma4CVcUJ_Qlz6YWmzVN2FMyTjaWmtoU24CqOyqS4K3dzZYBHgxN2wvGGckqyh6NsnnhitBSdKfCe7ZQ2b9RQLiPYw5nEB_L3mPHz5i_E_0Wmdlm6ZidB3BpGk9hIjMwHjcoVMB0pe_gdGoVWX9py-5pKP3TVEvfRBvrAYEp3GLajt8f9Iduaox8Xl563MCfiyCJNkZ6y3pCMPyze_1qbsXQihcIfQ-fTZrj4l_0000"></p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>核心交易系统是将配置信息存储在<code>etcd</code>容器内</p><h4 id="渠道"><a href="#渠道" class="headerlink" title="渠道"></a>渠道</h4><ul><li>基础目录: <code>/foo/bar/pay/config</code></li><li>每个渠道占用一个文件夹，每个渠道账户占用一个<code>文件</code>，例如微信存放在<code>/foo/bar/pay/config/wechat</code>目录下，appId: 2088123456 所在的配置信息存储在<code>/foo/bar/pay/config/wechat/2088123456</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pasted-8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;本文介绍核心支付系统的主要功能和组件。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="pay" scheme="http://xiongyingqi.com/categories/pay/"/>
    
    
      <category term="pay" scheme="http://xiongyingqi.com/tags/pay/"/>
    
      <category term="design" scheme="http://xiongyingqi.com/tags/design/"/>
    
      <category term="payment" scheme="http://xiongyingqi.com/tags/payment/"/>
    
      <category term="architecture" scheme="http://xiongyingqi.com/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>支付系统-概述</title>
    <link href="http://xiongyingqi.com/2019/02/06/pay-summary/"/>
    <id>http://xiongyingqi.com/2019/02/06/pay-summary/</id>
    <published>2019-02-06T05:44:23.000Z</published>
    <updated>2019-02-06T05:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/pasted-7.png" alt=""></p><blockquote><p>网上对于支付系统的讲解，都是比较偏概念性的讲解，很少有对于开发细节的说明文章。</p><p>博主有多年从事支付系统的设计与开发，希望能结合以往经验、做出总结，分享给即将从事或者正在从事开发的童鞋参考，也希望自己能多锻炼写作技能、总结能力。</p><p>如有不足或者错误的地方，请留言指出或交流讨论~感谢阅读！</p></blockquote><a id="more"></a><h1 id="支付系统"><a href="#支付系统" class="headerlink" title="支付系统"></a>支付系统</h1><p>支付系统主要是用于规范化支付流程、加强安全、财务对账等。一个支付系统要想做得好，一定要做好接口规范、做好安全措施、把调单对账做好。同时，服务必须是高可用、高一致性的。</p><h1 id="聚合支付与三方支付"><a href="#聚合支付与三方支付" class="headerlink" title="聚合支付与三方支付"></a>聚合支付与三方支付</h1><h2 id="规范支付流程"><a href="#规范支付流程" class="headerlink" title="规范支付流程"></a>规范支付流程</h2><p>规范支付流程的方法有：</p><ul><li>抽象支付场景，分别定义支付流程<ul><li>H5支付（有些支付商会定义为WAP支付）：主要适用于手机浏览器</li><li>APP支付</li><li>SDK支付</li><li>网银支付</li></ul></li><li>规范接口参数，尽量简化接入方的开发</li><li>提供良好的测试工具，方便调试</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul><li>网络层<ul><li>使用https协议下单、回调，保证网络数据不被窃听</li></ul></li><li>接口协议<ul><li>使用签名机制防止参数传输过程中被篡改</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/pasted-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;网上对于支付系统的讲解，都是比较偏概念性的讲解，很少有对于开发细节的说明文章。&lt;/p&gt;&lt;p&gt;博主有多年从事支付系统的设计与开发，希望能结合以往经验、做出总结，分享给即将从事或者正在从事开发的童鞋参考，也希望自己能多锻炼写作技能、总结能力。&lt;/p&gt;&lt;p&gt;如有不足或者错误的地方，请留言指出或交流讨论~感谢阅读！&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="pay" scheme="http://xiongyingqi.com/categories/pay/"/>
    
    
      <category term="pay" scheme="http://xiongyingqi.com/tags/pay/"/>
    
      <category term="design" scheme="http://xiongyingqi.com/tags/design/"/>
    
      <category term="payment" scheme="http://xiongyingqi.com/tags/payment/"/>
    
      <category term="summary" scheme="http://xiongyingqi.com/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用git子模块来管理theme</title>
    <link href="http://xiongyingqi.com/2019/02/01/use-git-submodules/"/>
    <id>http://xiongyingqi.com/2019/02/01/use-git-submodules/</id>
    <published>2019-02-01T04:09:19.000Z</published>
    <updated>2019-02-01T04:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们的博客可能面临评论系统不可用、分享插件不可用、主题升级的问题。</p><p>如果你是直接把代码copy到你的博客目录里面，那么你想修复这些问题，就会代码灾难性的后果。</p><p>使用git submodule能很好解决这个问题。<br><a id="more"></a></p><p>我们需要对主题进行单独的管理，使其成为博客的一个独立部件，而这就是使用 git submodule 的最佳场景。步骤如下：</p><pre><code>1. Fork 一份主题到自己的 Github 上。&gt; Fork 的目的在于，我们可以对主题进行各种个性化的定制以及修改，并对这些定制进行版本控制。同时，我们还能随时与原主题的更新进行合并。2. 创建一个 submodule。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog-hexo // 切换到hexo目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule add https://github.com/pinggod/hexo-theme-apollo themes/apollo</span></span><br></pre></td></tr></table></figure>3. 更新 _config.yml 使用修改过的主题。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: apollo</span><br></pre></td></tr></table></figure>4. 这时，我们就拥有了两个独立的仓库，一个是 hexo 博客，另外一个是主题。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog-hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6c40f5ec27e1889c5a0a0a999e847634a33aef1c themes/apollo (heads/master)</span></span><br></pre></td></tr></table></figure>并且，在 github 上也可以看到它指向了正确的地址。</code></pre><p>使用 submodule 配置好之后，在不同电脑间进行同步就非常简单了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog-hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update</span></span><br></pre></td></tr></table></figure><p>就算是一台全新的电脑，也可以很轻松地进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/buginux/swiftyper-blog.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> swiftyper-blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init</span></span><br></pre></td></tr></table></figure><p>使用几行代码就能配置一个博客，是不是感觉相当酷炫。而这其中的便利都是拜 Git 及 Github 所赐，这也是我为何如此喜欢它们的原因。</p><p>当然，使用这种方法也有缺点，那就是当原主题更新的时候，我们需要进行手动拉取对方的最新代码，并合并到自己的代码中，而且由于我们修改过主题，所以合并的过程中可能会出现冲突，这就需要我们进行手动解决了。不过总体来说，如果我们选择的是一个比较稳定的主题，出现这种情况的机率还是比较小的，相对于 submodule 的便利，这点付出还是值得的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.swiftyper.com/2017/07/25/managing-hexo-theme-using-submodule/" target="_blank" rel="noopener">www.swiftyper.com</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="noopener">Git-Tools-Submodules</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的博客可能面临评论系统不可用、分享插件不可用、主题升级的问题。&lt;/p&gt;&lt;p&gt;如果你是直接把代码copy到你的博客目录里面，那么你想修复这些问题，就会代码灾难性的后果。&lt;/p&gt;&lt;p&gt;使用git submodule能很好解决这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://xiongyingqi.com/categories/git/"/>
    
    
      <category term="git" scheme="http://xiongyingqi.com/tags/git/"/>
    
      <category term="hexo" scheme="http://xiongyingqi.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://xiongyingqi.com/tags/blog/"/>
    
      <category term="submodule" scheme="http://xiongyingqi.com/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>shell-strings</title>
    <link href="http://xiongyingqi.com/2019/01/30/shell-strings/"/>
    <id>http://xiongyingqi.com/2019/01/30/shell-strings/</id>
    <published>2019-01-30T23:05:00.000Z</published>
    <updated>2019-01-30T23:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做shell批处理程序时候，经常会涉及到字符串相关操作。有很多命令语句，如：awk,sed都可以做字符串各种操作。 其实shell内置一系列操作符号，可以达到类似效果，大家知道，使用内部操作符会省略启动外部程序等时间，因此速度会非常的快。</p><a id="more"></a><h1 id="判断读取字符串值"><a href="#判断读取字符串值" class="headerlink" title="判断读取字符串值"></a>判断读取字符串值</h1><ul><li>${var} 变量var的值, 与$var相同</li><li>${var-DEFAULT} 如果var没有被声明, 那么就以$DEFAULT作为其值 *</li><li>${var:-DEFAULT} 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 *</li><li>${var=DEFAULT} 如果var没有被声明, 那么就以$DEFAULT作为其值 *</li><li>${var:=DEFAULT} 如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值 *</li><li>${var+OTHER} 如果var声明了, 那么其值就是$OTHER, 否则就为null字符串</li><li>${var:+OTHER} 如果var被设置了, 那么其值就是$OTHER, 否则就为null字符串</li><li>${var?ERR_MSG} 如果var没被声明, 那么就打印$ERR_MSG *</li><li>${var:?ERR_MSG} 如果var没被设置, 那么就打印$ERR_MSG *</li><li>${!varprefix*} 匹配之前所有以varprefix开头进行声明的变量</li><li>${!varprefix@} 匹配之前所有以varprefix开头进行声明的变量</li></ul><blockquote><p>加入了“*” 不是意思是： 当然, 如果变量var已经被设置的话, 那么其值就是$var.</p></blockquote><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><ul><li>${string:position} 在string中, 从位置$position开始提取子串</li><li>${string:position:length} 在string中, 从位置$position开始提取长度为length的子串</li><li>${string#substring} 从变量string的开头, 删除最短匹配substring的子串</li><li>${string##substring} 从变量string的开头, 删除最长匹配substring的子串</li><li>${string%substring} 从变量string的结尾, 删除最短匹配substring的子串</li><li>${string%%substring} 从变量string的结尾, 删除最长匹配substring的子串</li><li>${string/substring/replacement} 使用replacement, 来代替第一个匹配的substring</li><li>${string//substring/replacement} 使用replacement, 代替所有匹配的substring</li><li>${string/#substring/replacement} 如果string的前缀匹配$substring, 那么就用replacement来代替匹配到的substring</li><li>${string/%substring/replacement} 如果string的后缀匹配$substring, 那么就用replacement来代替匹配到的substring</li></ul><blockquote><p>说明：”* $substring”可以是一个正则表达式.</p></blockquote><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>读取<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;abc-'ok'&#125;</span>  </span></span><br><span class="line">ok  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$abc</span>  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;abc='ok'&#125;</span>  </span></span><br><span class="line">ok  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$abc</span>  </span></span><br><span class="line">ok  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#</span><span class="bash">如果abc 没有声明“=<span class="string">" 还会给abc赋值。  </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> var1=11;var2=12;var3=  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;!v@&#125;</span>             </span></span><br><span class="line">var1 var2 var3  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;!v*&#125;</span>  </span></span><br><span class="line">var1 var2 var3  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$&#123;!varprefix*&#125;</span>与<span class="variable">$&#123;!varprefix@&#125;</span>相似，可以通过变量名前缀字符，搜索已经定义的变量,无论是否为空值。</span></span><br></pre></td></tr></table></figure><p></p><p>取得字符串长度<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string=abc12342341          //等号二边不要有空格  </span><br><span class="line">echo $&#123;#string&#125;             //结果11  </span><br><span class="line">expr length $string         //结果11  </span><br><span class="line">expr "$string" : ".*"       //结果11 分号二边要有空格,这里的:根match的用法差不多</span><br></pre></td></tr></table></figure><p></p><p>字符串所在位置<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">expr index $string '123'    //结果4 字符串对应的下标是从1开始的</span><br><span class="line">str="abc"  </span><br><span class="line">expr index $str "a"  # 1  </span><br><span class="line">expr index $str "b"  # 2  </span><br><span class="line">expr index $str "x"  # 0  </span><br><span class="line">expr index $str ""   # 0</span><br></pre></td></tr></table></figure><p></p><p>字符串截取<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;string:4&#125;      //2342341  从第4位开始截取后面所有字符串    </span><br><span class="line">echo $&#123;string:3:3&#125;    //123      从第3位开始截取后面3位    </span><br><span class="line">echo $&#123;string:3:6&#125;    //123423   从第3位开始截取后面6位    </span><br><span class="line">echo $&#123;string: -4&#125;    //2341  ：右边有空格   截取后4位    </span><br><span class="line">echo $&#123;string:(-4)&#125;   //2341  同上    </span><br><span class="line">expr substr $string 3 3   //123  从第3位开始截取后面3位 </span><br><span class="line"></span><br><span class="line">str="abcdef"  </span><br><span class="line">expr substr "$str" 1 3  # 从第一个位置开始取3个字符， abc  </span><br><span class="line">expr substr "$str" 2 5  # 从第二个位置开始取5个字符， bcdef   </span><br><span class="line">expr substr "$str" 4 5  # 从第四个位置开始取5个字符， def  </span><br><span class="line">  </span><br><span class="line">echo $&#123;str:2&#125;           # 从第二个位置开始提取字符串， bcdef  </span><br><span class="line">echo $&#123;str:2:3&#125;         # 从第二个位置开始提取3个字符, bcd  </span><br><span class="line">echo $&#123;str:(-6):5&#125;        # 从倒数第二个位置向左提取字符串, abcde  </span><br><span class="line">echo $&#123;str:(-4):3&#125;      # 从倒数第二个位置向左提取6个字符, cde</span><br></pre></td></tr></table></figure><p></p><p>匹配显示内容<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//例3中也有match和这里的match不同，上面显示的是匹配字符的长度，而下面的是匹配的内容    </span><br><span class="line">expr match $string '[a−c]∗[0−9]∗[a−c]∗[0−9]∗'  //abc12342341    </span><br><span class="line">expr $string : '[a−c]∗[0−9][a−c]∗[0−9]'       //abc1    </span><br><span class="line">expr $string : '.*[0−9][0−9][0−9][0−9][0−9][0−9]' //341 显示括号中匹配的内容</span><br></pre></td></tr></table></figure><p></p><blockquote><p>这里括号的用法，是不是根其他的括号用法有相似之处呢，</p></blockquote><p>截取不匹配的内容<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;string#a*3&#125;     //42341  从$string左边开始，去掉最短匹配子串    </span><br><span class="line">echo $&#123;string#c*3&#125;     //abc12342341  这样什么也没有匹配到    </span><br><span class="line">echo $&#123;string#*c1*3&#125;   //42341  从$string左边开始，去掉最短匹配子串    </span><br><span class="line">echo $&#123;string##a*3&#125;    //41     从$string左边开始，去掉最长匹配子串    </span><br><span class="line">echo $&#123;string%3*1&#125;     //abc12342  从$string右边开始，去掉最短匹配子串    </span><br><span class="line">echo $&#123;string%%3*1&#125;    //abc12     从$string右边开始，去掉最长匹配子串</span><br></pre></td></tr></table></figure><p></p><p>获取文件名<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url="https://dl.google.com/go/go1.12.darwin-amd64.tar.gz"</span><br><span class="line">echo $&#123;url##*/&#125;  // go1.12.darwin-amd64.tar.gz</span><br><span class="line">echo $&#123;url%/*&#125;    // https://dl.google.com/go</span><br></pre></td></tr></table></figure><p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str="abbc,def,ghi,abcjkl"  </span><br><span class="line">echo $&#123;str#a*c&#125;     # 输出,def,ghi,abcjkl  一个井号(#) 表示从左边截取掉最短的匹配 (这里把abbc字串去掉）  </span><br><span class="line">echo $&#123;str##a*c&#125;    # 输出jkl，             两个井号(##) 表示从左边截取掉最长的匹配 (这里把abbc,def,ghi,abc字串去掉)  </span><br><span class="line">echo $&#123;str#"a*c"&#125;   # 输出abbc,def,ghi,abcjkl 因为str中没有"a*c"子串  </span><br><span class="line">echo $&#123;str##"a*c"&#125;  # 输出abbc,def,ghi,abcjkl 同理  </span><br><span class="line">echo $&#123;str#*a*c*&#125;   # 空  </span><br><span class="line">echo $&#123;str##*a*c*&#125;  # 空  </span><br><span class="line">echo $&#123;str#d*f)     # 输出abbc,def,ghi,abcjkl,   </span><br><span class="line">echo $&#123;str#*d*f&#125;    # 输出,ghi,abcjkl     </span><br><span class="line">  </span><br><span class="line">echo $&#123;str%a*l&#125;     # abbc,def,ghi  一个百分号(%)表示从右边截取最短的匹配   </span><br><span class="line">echo $&#123;str%%b*l&#125;    # a             两个百分号表示(%%)表示从右边截取最长的匹配  </span><br><span class="line">echo $&#123;str%a*c&#125;     # abbc,def,ghi,abcjkl</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意，必须从字符串的第一个字符开始，或者从最后一个开始，可以这样记忆, 井号（#）通常用于表示一个数字，它是放在前面的；百分号（%）卸载数字的后面; 或者这样记忆，在键盘布局中，井号(#)总是位于百分号（%）的左边(即前面) 。</p></blockquote><p>匹配并且替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;string/23/bb&#125;   //abc1bb42341  替换一次    </span><br><span class="line">echo $&#123;string//23/bb&#125;  //abc1bb4bb41  双斜杠替换所有匹配    </span><br><span class="line">echo $&#123;string/#abc/bb&#125; //bb12342341   #以什么开头来匹配，根php中的^有点像    </span><br><span class="line">echo $&#123;string/%41/bb&#125;  //abc123423bb  %以什么结尾来匹配，根php中的$有点像</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str="apple, tree, apple tree"  </span><br><span class="line">echo $&#123;str/apple/APPLE&#125;   # 替换第一次出现的apple  </span><br><span class="line">echo $&#123;str//apple/APPLE&#125;  # 替换所有apple  </span><br><span class="line">  </span><br><span class="line">echo $&#123;str/#apple/APPLE&#125;  # 如果字符串str以apple开头，则用APPLE替换它  </span><br><span class="line">echo $&#123;str/%apple/APPLE&#125;  # 如果字符串str以apple结尾，则用APPLE替换它  </span><br><span class="line"> </span><br><span class="line">```shell  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">test</span>=<span class="string">'c:/windows/boot.ini'</span>  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test/\//\\&#125;</span>  </span></span><br><span class="line">c:\windows/boot.ini  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test//\//\\&#125;</span>  </span></span><br><span class="line">c:\windows\boot.ini  </span><br><span class="line"></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="variable">$&#123;变量/查找/替换值&#125;</span> 一个“/”表示替换第一个，”//”表示替换所有,当查找中出现了：”/”请加转义符”\/”表示。</span></span><br></pre></td></tr></table></figure><p>比较</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[ "a.txt" == a* ]]        # 逻辑真 (pattern matching)  </span><br><span class="line">[[ "a.txt" =~ .*\.txt ]]   # 逻辑真 (regex matching)  </span><br><span class="line">[[ "abc" == "abc" ]]       # 逻辑真 (string comparision)   </span><br><span class="line">[[ "11" &lt; "2" ]]           # 逻辑真 (string comparision), 按ascii值比较</span><br></pre></td></tr></table></figure><p>连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1="hello"  </span><br><span class="line">s2="world"  </span><br><span class="line">echo $&#123;s1&#125;$&#123;s2&#125;   # 当然这样写 $s1$s2 也行，但最好加上大括号</span><br></pre></td></tr></table></figure><p>字符串删除<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">test</span>=<span class="string">'c:/windows/boot.ini'</span>  </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test#/&#125;</span>  </span></span><br><span class="line">c:/windows/boot.ini  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test#*/&#125;</span>  </span></span><br><span class="line">windows/boot.ini  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test##*/&#125;</span>  </span></span><br><span class="line">boot.ini  </span><br><span class="line">  </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test%/*&#125;</span> </span></span><br><span class="line">c:/windows </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test%%/*&#125;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$&#123;变量名#substring正则表达式&#125;</span>从字符串开头开始配备substring,删除匹配上的表达式。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="variable">$&#123;变量名%substring正则表达式&#125;</span>从字符串结尾开始配备substring,删除匹配上的表达式。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：<span class="variable">$&#123;test##*/&#125;</span>,<span class="variable">$&#123;test%/*&#125;</span> 分别是得到文件名，或者目录地址最简单方法。</span></span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做shell批处理程序时候，经常会涉及到字符串相关操作。有很多命令语句，如：awk,sed都可以做字符串各种操作。 其实shell内置一系列操作符号，可以达到类似效果，大家知道，使用内部操作符会省略启动外部程序等时间，因此速度会非常的快。&lt;/p&gt;
    
    </summary>
    
      <category term="shell" scheme="http://xiongyingqi.com/categories/shell/"/>
    
    
      <category term="mac" scheme="http://xiongyingqi.com/tags/mac/"/>
    
      <category term="shell" scheme="http://xiongyingqi.com/tags/shell/"/>
    
      <category term="linux" scheme="http://xiongyingqi.com/tags/linux/"/>
    
      <category term="strings" scheme="http://xiongyingqi.com/tags/strings/"/>
    
      <category term="substring" scheme="http://xiongyingqi.com/tags/substring/"/>
    
  </entry>
  
  <entry>
    <title>Mac滚动截屏</title>
    <link href="http://xiongyingqi.com/2019/01/29/mac-screenshots/"/>
    <id>http://xiongyingqi.com/2019/01/29/mac-screenshots/</id>
    <published>2019-01-29T09:55:44.000Z</published>
    <updated>2019-01-29T09:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作为开发者，截图是一个必备技能之一"><a href="#作为开发者，截图是一个必备技能之一" class="headerlink" title="作为开发者，截图是一个必备技能之一"></a>作为开发者，截图是一个必备技能之一</h1><a id="more"></a><p>最常规的或许就是登陆QQ，使用Ctrl + Command（Alt）+ A，简单粗暴。没错，使用QQ快捷键截图可能是那些年我们最常用的方式。当然，这种方式并没有过时，大家依然常用，方便，快捷，实用。</p><p>另外，Mac有自带截图功能。</p><p>（1）Shift + Command + 3，会将生成图片自动保存到桌面上。</p><p>（2）Shift + Command + 4，会出现十字光标，按需选中要截图的内容后，会将生成图片自动保存到桌面上。</p><p>（3）Shift + Command + 4，会出现十字光标，按空格键，出现相机图标，然后点击界面，就会把当前界面生成图片自动保存到桌面上。</p><p>以上截图方式就已经很方便，那么，如果要截长图，有什么好的办法呢？</p><p>Chorme浏览器有自带截长图功能，方便好用。</p><p>打开需要截长图的网页，右键–检查–Shift + Command + P，输入<code>screen</code>，选择<code>Capture full size screenshot</code>，chrome会生成一张以当前页面url命名的长截图，并会将生成图片自动保存到下载里面，通过Finder可以找到。</p><p>当然，我们也可以用同样的方法，局部截图：</p><p>通过审查元素，选中我们需要截图的div盒子，选择：<code>Capture node screenshot</code>就可以实现局部截图了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;作为开发者，截图是一个必备技能之一&quot;&gt;&lt;a href=&quot;#作为开发者，截图是一个必备技能之一&quot; class=&quot;headerlink&quot; title=&quot;作为开发者，截图是一个必备技能之一&quot;&gt;&lt;/a&gt;作为开发者，截图是一个必备技能之一&lt;/h1&gt;
    
    </summary>
    
      <category term="tools" scheme="http://xiongyingqi.com/categories/tools/"/>
    
    
      <category term="mac" scheme="http://xiongyingqi.com/tags/mac/"/>
    
      <category term="screenshot" scheme="http://xiongyingqi.com/tags/screenshot/"/>
    
  </entry>
  
  <entry>
    <title>Docker notes</title>
    <link href="http://xiongyingqi.com/2019/01/28/docker-notes/"/>
    <id>http://xiongyingqi.com/2019/01/28/docker-notes/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重写docker镜像内的EntryPoint"><a href="#重写docker镜像内的EntryPoint" class="headerlink" title="重写docker镜像内的EntryPoint"></a>重写docker镜像内的EntryPoint</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --entrypoint "/bin/ls -al /root" debian</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重写docker镜像内的EntryPoint&quot;&gt;&lt;a href=&quot;#重写docker镜像内的EntryPoint&quot; class=&quot;headerlink&quot; title=&quot;重写docker镜像内的EntryPoint&quot;&gt;&lt;/a&gt;重写docker镜像内的EntryPoi
      
    
    </summary>
    
      <category term="docker" scheme="http://xiongyingqi.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xiongyingqi.com/tags/docker/"/>
    
      <category term="notes" scheme="http://xiongyingqi.com/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>gcr.io镜像：解决kubernetes镜像无法访问的问题</title>
    <link href="http://xiongyingqi.com/2019/01/28/google-containers/"/>
    <id>http://xiongyingqi.com/2019/01/28/google-containers/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes镜像（gcr-io）无法访问的问题"><a href="#kubernetes镜像（gcr-io）无法访问的问题" class="headerlink" title="kubernetes镜像（gcr.io）无法访问的问题"></a>kubernetes镜像（gcr.io）无法访问的问题</h1><blockquote><p>经常会遇到<code>gcr.io/google_containers</code>被墙的问题，可以使用：<a href="https://hub.docker.com/u/googlecontainer" target="_blank" rel="noopener">https://hub.docker.com/u/googlecontainer</a></p></blockquote><a id="more"></a><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>将<code>gcr.io/google_containers/$repo</code>替换为<code>googlecontainer/$repo</code>，例如需要使用<code>gcr.io/google_containers/kubernetes-dashboard-amd64</code>镜像，则使用<code>googlecontainer/kubernetes-dashboard-amd64</code>即可。</p><blockquote><p>docker pull googlecontainer/kubernetes-dashboard-amd64 # for docker<br>kubeadm init –image-repository googlecontainer # for kubernetes</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>travis-ci安装<a href="https://cloud.google.com/solutions/continuous-delivery-with-travis-ci" target="_blank" rel="noopener">gcloud</a>并授权，然后利用travis-ci的网络来拉取google_containers镜像，并将镜像push到docker仓库。每天定时出发travis来拉取google_containers的更新。</p><ol><li>使用<code>gcloud</code>命令列列举<code>gcr.io/google_containers</code>下的所有镜像repo</li><li>遍历第1步的repo，获取该repo的所有<code>tag</code>，然后对比<a href="https://github.com/blademainer/google_containers_mirror_completed_list/blob/master/gcr-complete-tasks" target="_blank" rel="noopener">gcr-complete-tasks</a>，如果该tag已经被同步，则跳过</li><li>拉取<code>gcr.io/google_containers/$repo:$tag</code>的镜像：<code>image</code>。如果<code>$image</code>已经在<a href="https://github.com/blademainer/google_containers_mirror_completed_list/blob/master/gcr-complete-images" target="_blank" rel="noopener">gcr-complete-images</a>内存在，则跳过。</li><li>修改<code>$image</code>的repo和tag，打docker tag为<code>googlecontainer/$repo:$tag</code>，并push到<code>googlecontainer$repo:$tag</code></li><li>重复2-4步，直到所有<code>$repo</code>都已经同步</li></ol><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>不需要自己vps</li><li>不需要搭梯子</li><li>理论镜像的延迟时间是24H，比较实时</li><li>全自动检测新镜像，不需要人为参与</li></ul><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul><li><del>比较依赖git来存储进度，造成git的commit log非常大</del>（已经解决，通过使用travis-ci的cache解决）</li><li>有被travis封禁的风险（每次限制存储量和任务量）</li><li><del>新增owner（目前owner=google_containers）时无法检测</del>（已经解决，使用<a href="https://github.com/blademainer/google_containers_mirror/blob/master/owners" target="_blank" rel="noopener">owners</a>文件来新增owner。如需增加，请留言或者提交Pull request。）</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/blademainer/google_containers_mirror" target="_blank" rel="noopener">https://github.com/blademainer/google_containers_mirror</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kubernetes镜像（gcr-io）无法访问的问题&quot;&gt;&lt;a href=&quot;#kubernetes镜像（gcr-io）无法访问的问题&quot; class=&quot;headerlink&quot; title=&quot;kubernetes镜像（gcr.io）无法访问的问题&quot;&gt;&lt;/a&gt;kubernetes镜像（gcr.io）无法访问的问题&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;经常会遇到&lt;code&gt;gcr.io/google_containers&lt;/code&gt;被墙的问题，可以使用：&lt;a href=&quot;https://hub.docker.com/u/googlecontainer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hub.docker.com/u/googlecontainer&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://xiongyingqi.com/categories/docker/"/>
    
    
      <category term="shell" scheme="http://xiongyingqi.com/tags/shell/"/>
    
      <category term="docker" scheme="http://xiongyingqi.com/tags/docker/"/>
    
      <category term="image" scheme="http://xiongyingqi.com/tags/image/"/>
    
      <category term="google" scheme="http://xiongyingqi.com/tags/google/"/>
    
      <category term="containers" scheme="http://xiongyingqi.com/tags/containers/"/>
    
      <category term="kubernetes" scheme="http://xiongyingqi.com/tags/kubernetes/"/>
    
      <category term="k8s" scheme="http://xiongyingqi.com/tags/k8s/"/>
    
      <category term="forbid" scheme="http://xiongyingqi.com/tags/forbid/"/>
    
      <category term="gcr" scheme="http://xiongyingqi.com/tags/gcr/"/>
    
      <category term="io" scheme="http://xiongyingqi.com/tags/io/"/>
    
      <category term="mirror" scheme="http://xiongyingqi.com/tags/mirror/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes-notes</title>
    <link href="http://xiongyingqi.com/2019/01/25/kubernetes-notes-md/"/>
    <id>http://xiongyingqi.com/2019/01/25/kubernetes-notes-md/</id>
    <published>2019-01-25T16:00:00.000Z</published>
    <updated>2019-01-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes笔记</p><a id="more"></a><h1 id="导出现有的资源"><a href="#导出现有的资源" class="headerlink" title="导出现有的资源"></a>导出现有的资源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> $(kubectl get -o=name pvc,configmap,serviceaccount,secret,ingress,service,deployment,statefulset,hpa,job,cronjob)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    mkdir -p $(dirname <span class="variable">$n</span>)</span><br><span class="line">    kubectl get -o=yaml --<span class="built_in">export</span> <span class="variable">$n</span> &gt; <span class="variable">$n</span>.yaml</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="热更新deploy"><a href="#热更新deploy" class="headerlink" title="热更新deploy"></a>热更新deploy</h1><p>有时候我们修改了ConfigMap，但是代码不支持，肯定不能让程序停止，因此必须支持热更新。命令如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl patch deployment [deploy] --patch <span class="string">'&#123;"spec": &#123;"template": &#123;"metadata": &#123;"annotations": &#123;"version/config": "'</span>`date +%Y%m%d%H%M%S`<span class="string">'" &#125;&#125;&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p></p><h1 id="拷贝secrets到其他namespace"><a href="#拷贝secrets到其他namespace" class="headerlink" title="拷贝secrets到其他namespace"></a>拷贝secrets到其他namespace</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret gitlab-registry --namespace=revsys-com --<span class="built_in">export</span> -o yaml |\</span><br><span class="line">   kubectl apply --namespace=devspectrum-dev -f -</span><br></pre></td></tr></table></figure><h1 id="临时运行一个pod"><a href="#临时运行一个pod" class="headerlink" title="临时运行一个pod"></a>临时运行一个pod</h1><ul><li><code>--restart=Never</code> 代表起一个pod</li><li><code>--rm</code> 在终端退出时删除pod</li><li><code>-l</code> 给pod打label</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run --rm -it busybox --image sequenceiq/busybox --restart=Never</span><br><span class="line">kubectl run --rm -it mysql-client --image=mysql -l <span class="string">"net=grant-db"</span> --restart=Never bash</span><br></pre></td></tr></table></figure><h1 id="获取pod信息"><a href="#获取pod信息" class="headerlink" title="获取pod信息"></a>获取pod信息</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line">  - name: MY_NODE_NAME</span><br><span class="line">    valueFrom:</span><br><span class="line">      fieldRef:</span><br><span class="line">        fieldPath: spec.nodeName</span><br><span class="line">  - name: MY_POD_NAME</span><br><span class="line">    valueFrom:</span><br><span class="line">      fieldRef:</span><br><span class="line">        fieldPath: metadata.name</span><br><span class="line">  - name: MY_POD_NAMESPACE</span><br><span class="line">    valueFrom:</span><br><span class="line">      fieldRef:</span><br><span class="line">        fieldPath: metadata.namespace</span><br><span class="line">  - name: MY_POD_IP</span><br><span class="line">    valueFrom:</span><br><span class="line">      fieldRef:</span><br><span class="line">        fieldPath: status.podIP</span><br><span class="line">  - name: MY_POD_SERVICE_ACCOUNT</span><br><span class="line">    valueFrom:</span><br><span class="line">      fieldRef:</span><br><span class="line">        fieldPath: spec.serviceAccountName</span><br></pre></td></tr></table></figure><h1 id="Scratch-Debugger"><a href="#Scratch-Debugger" class="headerlink" title="Scratch Debugger"></a>Scratch Debugger</h1><p>This is a tool to make debugging containers based on scratch easier. The script<br>works by bringing up a pod with a statically-linked busybox image on the same<br>node as the debug target, mounting the node’s root filesystem, and calling<br>docker directly to copy busybox into the target container. Once the “install” is<br>complete, the target can be debugged through a standard kubectl exec.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/kubernetes/contrib/master/scratch-debugger/debug.sh | sh -s -- POD_NAME [-n POD_NAMESPACE -c CONTAINER_NAME]</span><br></pre></td></tr></table></figure><ul><li><code>POD_NAME</code> - The name of the pod to debug.</li><li><code>POD_NAMESPACE</code> - The namespace of the target pod (defaults to <code>default</code>).</li><li><code>CONTAINER_NAME</code> - The name of the container in the pod to debug (defaults to the first container).</li></ul><p>Additionally, the following environment variables can be set:</p><ul><li><code>TMP_SUBDIR</code> - The subdirectory under <code>/tmp</code> to install busybox into (defaults to <code>debug-tools</code>).</li><li><code>KUBECONTEXT</code> - The kubectl context to use (defaults to current context).</li><li><code>DEBUGGER_NAME</code> - The name to use for the debug pod (defaults to <code>debugger</code>).</li><li><code>ARCH</code> - The architecture Kubernetes is running on (defaults to <code>amd64</code>).</li><li><code>DOCKER_DOWNLOAD_URL</code> - URL for downloading the docker release <code>.tgz</code> file<br>(see <code>debug.sh</code> for the default value).</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Create a simple <code>pause</code> pod, which is based off a scratch image and does nothing.<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f - &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name:   pause</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name:    pause</span><br><span class="line">      image: k8s.gcr.io/pause</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">pod <span class="string">"pause"</span> created</span><br></pre></td></tr></table></figure><p></p><p>Note that we cannot simply exec into the pod, since there isn’t a shell or any<br>other interactive tools available:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -i -t pause -- sh</span><br><span class="line">rpc error: code = 2 desc = <span class="string">"oci runtime error: exec failed: exec: \"sh\": executable file not found in <span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><p></p><p>So we use the <code>debug.sh</code> script to copy busybox (which includes many common<br>tools) into the container:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ scratch-debugger/debug.sh pause</span><br><span class="line">Debug Target Container:</span><br><span class="line">  Pod:          pause</span><br><span class="line">  Namespace:    default</span><br><span class="line">  Node:         e2e-test-stclair-minion-group-phj6</span><br><span class="line">  Container:    pause</span><br><span class="line">  Container ID: 80b134ab6550d34684cdb31e4300ff128f9f43f67fdb3d271372f9417e546737</span><br><span class="line">  Runtime:      docker</span><br><span class="line"></span><br><span class="line">Installing busybox to /tmp/debug-tools ...</span><br><span class="line">pod <span class="string">"debugger"</span> created</span><br><span class="line">waiting <span class="keyword">for</span> debugger pod to become ready...</span><br><span class="line">Installation complete.</span><br><span class="line">To debug pause, run:</span><br><span class="line">    kubectl <span class="built_in">exec</span> -i -t pause -- /tmp/debug-tools/sh -c <span class="string">'PATH=$PATH:/tmp/debug-tools sh'</span></span><br><span class="line">Dumping you into the pod container now.</span><br><span class="line"></span><br><span class="line">/ <span class="comment"># ls</span></span><br><span class="line">dev    etc    pause  proc   sys    tmp    var</span><br><span class="line">/ <span class="comment"># echo Hello world!</span></span><br><span class="line">Hello world!</span><br><span class="line">/ <span class="comment"># exit</span></span><br><span class="line">pod <span class="string">"debugger"</span> deleted</span><br></pre></td></tr></table></figure><p></p><p>The script automatically execs into the pod and starts a shell (<code>ash</code>) with the<br><code>PATH</code> variable set to include the debug tools. After exiting, the tools are<br>still present in the pod, and we can simply exec back in using the command the<br>script gave us:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -i -t pause -- /tmp/debug-tools/sh -c <span class="string">'PATH=$PATH:/tmp/debug-tools sh'</span></span><br><span class="line">/ <span class="comment"># which sh</span></span><br><span class="line">/tmp/debug-tools/sh</span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure><p>Alternatively, we can just call the <code>debug.sh</code> script again:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ scratch-debugger/debug.sh pause</span><br><span class="line">Debug tools already installed. Dumping you into the pod container now.</span><br><span class="line">/ <span class="comment"># exit</span></span><br></pre></td></tr></table></figure><p></p><p>Once we’ve finished debugging, it’s a good practice to delete the “tainted”<br>pod. If that is undesirable for some reason, you can simply delete the tools<br>from the container:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> pause -- /tmp/debug-tools/rm -r /tmp/debug-tools</span><br></pre></td></tr></table></figure><p></p><h1 id="mysql-operator"><a href="#mysql-operator" class="headerlink" title="mysql-operator"></a>mysql-operator</h1><p>简化在kubernetes内创建mysql集群(支持MySQL Group Replication)<br><a href="https://github.com/oracle/mysql-operator/blob/master/docs/tutorial.md" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes笔记&lt;/p&gt;
    
    </summary>
    
      <category term="kuberbetes" scheme="http://xiongyingqi.com/categories/kuberbetes/"/>
    
    
      <category term="notes" scheme="http://xiongyingqi.com/tags/notes/"/>
    
      <category term="kubernetes" scheme="http://xiongyingqi.com/tags/kubernetes/"/>
    
  </entry>
  
</feed>
